<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TTTTTempest</title>
  
  <subtitle>无名之辈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://akaduo2019.github.io/"/>
  <updated>2020-08-30T02:42:33.234Z</updated>
  <id>http://akaduo2019.github.io/</id>
  
  <author>
    <name>akaduo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>异常处理</title>
    <link href="http://akaduo2019.github.io/2020/08/30/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://akaduo2019.github.io/2020/08/30/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-08-30T02:42:33.234Z</published>
    <updated>2020-08-30T02:42:33.234Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>c++中的new与delete</title>
    <link href="http://akaduo2019.github.io/2020/08/30/new%E4%B8%8Edelete/"/>
    <id>http://akaduo2019.github.io/2020/08/30/new%E4%B8%8Edelete/</id>
    <published>2020-08-30T02:11:10.591Z</published>
    <updated>2020-08-30T02:40:38.845Z</updated>
    
    <content type="html"><![CDATA[<p>new与delte都为运算符而非库函数</p><hr><p>new</p><p>定义符号常量 const int N=…; const int M=…;<br>定义变量 int型指针p，二级指针q，int型i，j;</p><p>申请一个int型动态变量:p=new int;</p><p>申请N个元素的动态一维数组:p=new int[N];</p><p>申请N行M列的动态二维数组：q=new int[N];<br>                         for (i=0;i&lt;N;i++)<br>                          q[i]=new int[M];<br>数组元素可用q[i][j]调用</p><p>注:1.new申请的动态内存空间中存放的为随机值<br>   2.p=new int(10); 相当于 p=new int;*p=10;</p><hr><p>delete</p><p>释放一个int型的动态变量：deelte p;<br>释放N个元素的动态一维数组: delete[]p;<br>释放N行M列的动态二维数组：for(i=0;i&lt;N;i++)<br>                            delete []q[i];<br>                        delete []q;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;new与delte都为运算符而非库函数&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;new&lt;/p&gt;
&lt;p&gt;定义符号常量 const int N=…; const int M=…;&lt;br&gt;定义变量 int型指针p，二级指针q，int型i，j;&lt;/p&gt;
&lt;p&gt;申请一个int型动态变量:p=new 
      
    
    </summary>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/categories/notes/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>c++中的string类型</title>
    <link href="http://akaduo2019.github.io/2020/04/03/string%E7%B1%BB%E5%9E%8B/"/>
    <id>http://akaduo2019.github.io/2020/04/03/string%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-04-02T16:32:27.315Z</published>
    <updated>2020-08-30T07:59:54.827Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"student"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1; <span class="comment">//可用getline(cin,s1)读入待空格的串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2.length() &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//string 串名.length() 求串长</span></span><br><span class="line"></span><br><span class="line">s2.insert(<span class="number">7</span>,<span class="string">"&amp;Teacher"</span>);<span class="comment">//向串s2下标为7处中插入 &amp;Teacher</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为student&amp;Teacher</span></span><br><span class="line"></span><br><span class="line">s2.replace(<span class="number">2</span>,<span class="number">4</span>,<span class="string">"ar"</span>);<span class="comment">//将串s2的 以下标2处为起始位置,长度为4的子串  替换成ar</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为start&amp;Teacher</span></span><br><span class="line"></span><br><span class="line">s1=s2.substr(<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//提取串s2中 从下标6开始，长度为7的子串 ，并赋值给s1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为Teacher</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos =s2.<span class="built_in">find</span>(s1);<span class="comment">//在串s2中寻找s1串是否存在,若存在则返回s1串的第一个字符在s3中的下标</span></span><br><span class="line"></span><br><span class="line">s2.erase(<span class="number">5</span>,<span class="number">8</span>);<span class="comment">//删除串s2的从5下标开始的长度为8的子串</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>c_str()函数返回一个指向正规C字符串的指针, 内容与本string串相同.</p></blockquote><p>这是为了与c语言兼容，在c语言中没有string类型，故必须通过string类对象的成员函数c_str()把string 对象转换成c中的字符串样式。</p><p>注意:一定要使用strcpy()函数 等来操作方法c_str()返回的指针</p><p>1、比如:最好不要这样:</p><p>char* c;</p><p>string s=”1234”;</p><p>c = s.c_str(); //c最后指向的内容是垃圾，因为s对象被析构，所以不能直接利用c_str返回的字符串，要利用strcpy等函数进行复制后再使用</p><p>2、其内容被处理应该这样用:</p><p>char c[20];</p><p>string s=”1234”;</p><p>strcpy(c,s.c_str());</p><p>这样才不会出错，c_str()返回的是一个临时指针，不能对其进行操作。</p><p>3、再举个例子c_str() 以 char* 形式传回 string 内含字符串如果一个函数要求char*参数，可以使用c_str()方法:</p><p>string s = “Hello World!”;</p><p>printf(“%s”, s.c_str()); //输出 “Hello World!”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/categories/notes/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>hello-world</title>
    <link href="http://akaduo2019.github.io/2019/11/23/hello-world/"/>
    <id>http://akaduo2019.github.io/2019/11/23/hello-world/</id>
    <published>2019-11-23T13:16:35.000Z</published>
    <updated>2020-04-02T16:16:23.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello world&quot;&gt;&lt;/a&gt;Hello world&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="test" scheme="http://akaduo2019.github.io/categories/test/"/>
    
    
      <category term="test" scheme="http://akaduo2019.github.io/tags/test/"/>
    
  </entry>
  
</feed>
