<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TTTTTempest</title>
  
  <subtitle>无名之辈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://akaduo2019.github.io/"/>
  <updated>2020-10-22T12:33:19.579Z</updated>
  <id>http://akaduo2019.github.io/</id>
  
  <author>
    <name>akaduo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>求主析取范式和主合取范式</title>
    <link href="http://akaduo2019.github.io/2020/10/21/%E7%A6%BB%E6%95%A3%E5%AE%9E%E9%AA%8C1/"/>
    <id>http://akaduo2019.github.io/2020/10/21/%E7%A6%BB%E6%95%A3%E5%AE%9E%E9%AA%8C1/</id>
    <published>2020-10-21T10:15:56.791Z</published>
    <updated>2020-10-22T12:33:19.579Z</updated>
    
    <content type="html"><![CDATA[<p>编程实现用真值表法求取含n个变元的合式公式所对应的主析取范式和主合取范式。<br>要求：<br>能够列出合式公式的真值表并给出相应主析取和主合取范式。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对用户输入值进行处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretreatment</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#Ⅰ将用户输入值分割为一个个字符并以列表形式储存；</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        in_put = input(<span class="string">"或运算为 |  , 与运算为 &amp;   ,单条件为 -&gt;  ,双条件我 &lt;=&gt; ,非运算为 ! ,变元采用大写\n请输入表达式，并以回车结束\n"</span>)</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> in_put:</span><br><span class="line">            infix.append(value)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment">#Ⅱ将双条件 &lt;= &gt; 视为 &lt; ；将条件-&gt;视为 -</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">'='</span> <span class="keyword">in</span> infix:</span><br><span class="line">        infix.remove(<span class="string">'='</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">'&gt;'</span> <span class="keyword">in</span> infix:</span><br><span class="line">        infix.remove(<span class="string">'&gt;'</span>)</span><br><span class="line">    <span class="comment">#Ⅲ 将合式中的变元储存到列表alpha中</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> infix:</span><br><span class="line">        <span class="keyword">if</span> value &lt;= <span class="string">'Z'</span> <span class="keyword">and</span> value &gt;= <span class="string">'A'</span>:</span><br><span class="line">            <span class="keyword">while</span> value <span class="keyword">not</span> <span class="keyword">in</span> alpha:</span><br><span class="line">                alpha.append(value)</span><br><span class="line"><span class="comment">#中缀表达式转化为后缀表达式的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infix_to_suffix</span><span class="params">(_infix)</span>:</span></span><br><span class="line">    <span class="comment"># 清空stack</span></span><br><span class="line">    stack.clear()</span><br><span class="line">    <span class="comment"># 从左向右遍历</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> _infix:</span><br><span class="line">        <span class="comment"># 当遇到运算数时直接输出</span></span><br><span class="line">        <span class="keyword">if</span> value &lt;= <span class="string">'Z'</span> <span class="keyword">and</span> value &gt;= <span class="string">'A'</span>:</span><br><span class="line">            suffix.append(value)</span><br><span class="line">        <span class="comment"># 遇到左括号为最高优先级，直接压入堆栈，注意入栈后左括号优先级将为最低，确保其他符号正常入栈</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'('</span>:</span><br><span class="line">            stack.append(value)</span><br><span class="line">        <span class="comment"># 遇到右括号，不断弹出栈顶运算符并输出，直到遇到左括号，左括号弹出但不输出</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">')'</span>:</span><br><span class="line">            <span class="keyword">while</span> stack[<span class="number">-1</span>] != <span class="string">'('</span>:</span><br><span class="line">                suffix.append(stack.pop())</span><br><span class="line">            <span class="comment"># 弹出左括号</span></span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="comment"># 若该运算符与栈顶元素比较，其优先级低于等于栈顶元素，应将栈顶运算符弹出并输出，然后与新的栈顶元素符比较；</span></span><br><span class="line">        <span class="comment"># 若栈为空或与栈顶元素比较，优先级高于栈顶元素，则应压入堆栈；</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'|'</span> <span class="keyword">or</span> value ==<span class="string">'&amp;'</span> <span class="keyword">or</span> value ==<span class="string">'-'</span> <span class="keyword">or</span> value ==<span class="string">'&lt;'</span>:</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                <span class="keyword">if</span> stack[<span class="number">-1</span>]==<span class="string">'('</span>:</span><br><span class="line">                    stack.append(value)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    suffix.append(stack.pop())</span><br><span class="line">                    <span class="keyword">if</span> stack:</span><br><span class="line">                        <span class="keyword">while</span> stack[<span class="number">-1</span>] != <span class="string">'('</span>:</span><br><span class="line">                            suffix.append(stack.pop())</span><br><span class="line">                            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                    stack.append(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(value)</span><br><span class="line">        <span class="comment"># 遇到运算符：非</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'!'</span>:</span><br><span class="line">            <span class="comment">#栈不为空</span></span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                <span class="comment">#如果栈顶元素也为 非，那么此时运算符优先级低于或等于栈顶元素优先级，应将栈顶运算符弹出并输出，然后比较新的栈顶运算符</span></span><br><span class="line">                <span class="keyword">if</span> stack[<span class="number">-1</span>] == <span class="string">'!'</span>:</span><br><span class="line">                    suffix.append(stack.pop())</span><br><span class="line">                    <span class="comment"># 当栈不为空且栈顶元素仍为 非 ，则继续比较</span></span><br><span class="line">                    <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>] == <span class="string">'!'</span>:</span><br><span class="line">                        suffix.append(stack.pop())</span><br><span class="line">                    <span class="comment">#弹出到栈顶元素不为非或者栈为空时，将该运算符 非 压入堆栈</span></span><br><span class="line">                    stack.append(value)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stack.append(value)</span><br><span class="line">            <span class="comment">#栈为空，直接压入堆栈</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(value)</span><br><span class="line">    <span class="comment">#最后按顺序弹出栈内值并输出</span></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        suffix.append(stack.pop())</span><br><span class="line"><span class="comment">#后缀表达式对应的真值的计算</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">()</span>:</span></span><br><span class="line">    stack.clear()</span><br><span class="line">    <span class="comment">#从左向右遍历</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> suffix:</span><br><span class="line">        <span class="comment">#遇到运算数，将运算数对应的真值压入堆栈</span></span><br><span class="line">        <span class="keyword">if</span> value &gt;= <span class="string">'A'</span> <span class="keyword">and</span> value &lt;= <span class="string">'Z'</span>:</span><br><span class="line">             stack.append(truth_table[value])</span><br><span class="line">        <span class="comment">#遇到运算符&amp;</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'&amp;'</span>:</span><br><span class="line">            number_1 = stack.pop()</span><br><span class="line">            number_2 = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number_1 == <span class="number">1</span> <span class="keyword">and</span> number_2 == <span class="number">1</span>:</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">#遇到运算符|</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'|'</span>:</span><br><span class="line">            number_1 = stack.pop()</span><br><span class="line">            number_2 = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number_1 == <span class="number">0</span> <span class="keyword">and</span> number_2 == <span class="number">0</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#遇到运算符-&gt;</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'-'</span>:</span><br><span class="line">            number_1 = stack.pop()</span><br><span class="line">            number_2 = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number_1 == <span class="number">0</span> <span class="keyword">and</span> number_2 == <span class="number">1</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#遇到运算符&lt;=&gt;</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'&lt;'</span>:</span><br><span class="line">            number_1 = stack.pop()</span><br><span class="line">            number_2 = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number_1 == number_2 :</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">#遇到运算符！</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'!'</span>:</span><br><span class="line">            number = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number == <span class="number">1</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> number == <span class="number">0</span>:</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#返回栈顶元素值，即结果</span></span><br><span class="line">    <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#递归方法实现真值表的全排列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == len(alpha):</span><br><span class="line">        ans = calculate()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">            <span class="keyword">if</span> truth_table[alpha[i]] == <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">"T\t"</span>,end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"F\t"</span>,end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> ans == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">"T\n"</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">                true.append(truth_table[alpha[i]])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"F\n"</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">                false.append(truth_table[alpha[i]])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        truth_table[alpha[num]] = <span class="number">1</span></span><br><span class="line">        recursive(num+<span class="number">1</span>)</span><br><span class="line">        truth_table[alpha[num]] = <span class="number">0</span></span><br><span class="line">        recursive(num+<span class="number">1</span>)</span><br><span class="line"><span class="comment">#求取主析取范式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_to_pdnf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> true:</span><br><span class="line">        print(<span class="string">"主析取范式为："</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(true),len(alpha)):</span><br><span class="line">            j = i % len(alpha)</span><br><span class="line">            print(<span class="string">'('</span>, end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">                print(transform_1(true[i+k])+alpha[j+k],end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">if</span> k&lt;len(alpha)<span class="number">-1</span>:</span><br><span class="line">                    print(<span class="string">'∧'</span>,end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">')'</span>,end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> i &lt; len(true)-len(alpha) <span class="keyword">and</span> len(true) != len(alpha):</span><br><span class="line">                print(<span class="string">"∨"</span>,end=<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"><span class="comment">#求取主合取范式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_to_pcnf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> false:</span><br><span class="line">        print(<span class="string">"主合取范式为："</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(false), len(alpha)):</span><br><span class="line">            j = i % len(alpha)</span><br><span class="line">            print(<span class="string">'('</span>, end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(alpha)):</span><br><span class="line">                print(transform_2(false[i + k]) + alpha[j + k], end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">if</span> k &lt; len(alpha) - <span class="number">1</span>:</span><br><span class="line">                    print(<span class="string">'∨'</span>, end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">')'</span>, end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> i &lt; len(false)-len(alpha) <span class="keyword">and</span> len(false) != len(alpha):</span><br><span class="line">                print(<span class="string">'∧'</span>, end=<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"><span class="comment">#析取中非的符号转换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_1</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'¬'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"><span class="comment">#合取中非的符号转换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_2</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">'¬'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">""</span></span><br><span class="line"><span class="comment"># 储存中缀表达式</span></span><br><span class="line">infix = []</span><br><span class="line"><span class="comment"># 储存变元</span></span><br><span class="line">alpha = []</span><br><span class="line"><span class="comment"># 存放转化后的后缀表达式</span></span><br><span class="line">suffix = []</span><br><span class="line"><span class="comment"># 用作中间运算的堆栈</span></span><br><span class="line">stack = []</span><br><span class="line"><span class="comment"># 映射:字典truth_table:key为alpha中的元素，value为0或1</span></span><br><span class="line">truth_table = &#123;&#125;</span><br><span class="line"><span class="comment"># 存放合式为真的情况，用于主析取范式</span></span><br><span class="line">true = []</span><br><span class="line"><span class="comment"># 存放合式为假的情况，用于主合取范式</span></span><br><span class="line">false = []</span><br><span class="line"><span class="comment"># 划分运算符优先级：1为最高级</span></span><br><span class="line">pretreatment()</span><br><span class="line">infix_to_suffix(infix)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">    print(alpha[i]+<span class="string">"\t"</span>,end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">"表达式真值"</span>)</span><br><span class="line">recursive(<span class="number">0</span>)</span><br><span class="line">turn_to_pdnf()</span><br><span class="line">turn_to_pcnf()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编程实现用真值表法求取含n个变元的合式公式所对应的主析取范式和主合取范式。&lt;br&gt;要求：&lt;br&gt;能够列出合式公式的真值表并给出相应主析取和主合取范式。&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="python" scheme="http://akaduo2019.github.io/categories/python/"/>
    
    
      <category term="experiment" scheme="http://akaduo2019.github.io/tags/experiment/"/>
    
  </entry>
  
  <entry>
    <title>操作列表</title>
    <link href="http://akaduo2019.github.io/2020/09/17/python3%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/"/>
    <id>http://akaduo2019.github.io/2020/09/17/python3%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</id>
    <published>2020-09-17T12:33:20.787Z</published>
    <updated>2020-09-18T11:20:05.656Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="python" scheme="http://akaduo2019.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>列表初入</title>
    <link href="http://akaduo2019.github.io/2020/09/17/python2%E5%88%97%E8%A1%A8%E5%88%9D%E5%85%A5/"/>
    <id>http://akaduo2019.github.io/2020/09/17/python2%E5%88%97%E8%A1%A8%E5%88%9D%E5%85%A5/</id>
    <published>2020-09-17T12:00:37.924Z</published>
    <updated>2020-10-03T02:50:48.587Z</updated>
    
    <content type="html"><![CDATA[<p>一、增删列表元素怒</p><p>在列表中添加元素</p><ol><li><p>list.append(‘Tempest’) 在列表末尾添加元素</p></li><li><p>list.insert(num,’Tempest’) 在列表任何位置添加新元素</p></li></ol><hr><p>在列表中删除元素</p><ol><li><p>del list[num]   使用del语句可删除任何位置处列表元素，条件时知道其索引</p></li><li><p>list.pop()    删除列表末尾的元素<br>list.pop(num) 删除列表任何位置元素<br>message=list.pop() 可以在删除元素的同时保存它</p></li></ol><p>注:如果你不确定该使用del 语句还是pop() 方法，下面是一个简单的判断标准：如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del 语句；如果你要在删除元素后还能继续使用它，就使用方法pop()<br>3. list.remove(‘Tempest’) 根据值删除元素<br>   注:①可在删除元素前保存它，再进行删除操作<br>      ②remove()方法只删除第一个指定的值(一个要删除的值可能在列表中出现多次)</p><p>二、组织列表</p><ol><li><p>list.sort() 对列表进行永久性排序<br>list.sort(reverse=True)  反向 永久性排序</p></li><li><p>sorted(list) 对列表进行临时排序，返回值是临时排序的列表</p></li><li><p>list.reverse() 反转列表元素的排列顺序<br>注:①reverse() 不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序<br>   ②reverse() 永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse() 即可</p></li><li><p>len(list) 函数len()可快速获取列表的长度</p></li></ol><p>三、补充</p><p>需要访问最后一个列表元素时，都可使用所以-1，例：list[-1]<br>仅当列表为空时，这种访问最后一个元素的方式才会报错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、增删列表元素怒&lt;/p&gt;
&lt;p&gt;在列表中添加元素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;list.append(‘Tempest’) 在列表末尾添加元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list.insert(num,’Tempest’) 在列表任何位置添加新元素&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://akaduo2019.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>C++中的for循环的语法</title>
    <link href="http://akaduo2019.github.io/2020/09/16/C++%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
    <id>http://akaduo2019.github.io/2020/09/16/C++%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF%E7%9A%84%E8%AF%AD%E6%B3%95/</id>
    <published>2020-09-16T15:02:57.330Z</published>
    <updated>2020-09-17T11:48:02.049Z</updated>
    
    <content type="html"><![CDATA[<p>C++ 中 for 循环的语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( init; condition; increment )</span><br><span class="line">&#123;</span><br><span class="line">   statement(s);</span><br></pre></td></tr></table></figure><p>下面是 for 循环的控制流：</p><p>init 会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。<br>接下来，会判断 condition。如果为真，则执行循环主体。如果为假，则不执行循环主体，且控制流会跳转到紧接着 for 循环的下一条语句。<br>在执行完 for 循环主体后，控制流会跳回上面的 increment 语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。<br>条件再次被判断。如果为真，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为假时，for 循环终止。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++ 中 for 循环的语法：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="http://akaduo2019.github.io/2020/09/14/python2%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://akaduo2019.github.io/2020/09/14/python2%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-09-14T02:56:36.371Z</published>
    <updated>2020-09-17T12:33:34.108Z</updated>
    
    <content type="html"><![CDATA[<p>一、修改字符串大小写</p><ol><li>string.title()  令首字母大写</li><li>string.upper()  令字符串字母全部改为大写</li><li>string.lower()  令字符串字母全部改为小写</li></ol><hr><p>二、删除空白(泛指任何非打印字符,如空格、制表符和换行符)</p><ol><li>string.rstrip() 删除字符串末尾空白</li><li>string.lstrip() 删除字符串开头空白</li><li>string.strip()  同时删除字符串两端的空白<br>注:但这种删除只是暂时的，接下来再次访问sting的值时会发现仍包含多余空白。若需要永久删除整个字符串中的空白，必须将删除操作的结果存回变量中<br>如:string=string.rstrip()</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、修改字符串大小写&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;string.title()  令首字母大写&lt;/li&gt;
&lt;li&gt;string.upper()  令字符串字母全部改为大写&lt;/li&gt;
&lt;li&gt;string.lower()  令字符串字母全部改为小写&lt;/li&gt;
&lt;/ol&gt;
&lt;hr
      
    
    </summary>
    
    
      <category term="python" scheme="http://akaduo2019.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://akaduo2019.github.io/2020/09/01/%E6%97%A0%E9%A2%981/"/>
    <id>http://akaduo2019.github.io/2020/09/01/%E6%97%A0%E9%A2%981/</id>
    <published>2020-09-01T06:42:32.426Z</published>
    <updated>2020-09-17T11:48:22.244Z</updated>
    
    <content type="html"><![CDATA[<p>在定义一个派生类对象时，构造函数的调用顺序如下：<br>1、虚基类的构造函数<br>2、非虚基类的构造函数<br>3、派生类对象成员的构造函数(按定义顺序)<br>4、派生类构造函数</p><hr><p>析构函数的调用次序正好与构造函数的调用次序相反</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在定义一个派生类对象时，构造函数的调用顺序如下：&lt;br&gt;1、虚基类的构造函数&lt;br&gt;2、非虚基类的构造函数&lt;br&gt;3、派生类对象成员的构造函数(按定义顺序)&lt;br&gt;4、派生类构造函数&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;析构函数的调用次序正好与构造函数的调用次序相反&lt;/p&gt;
&lt;hr&gt;

      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>const与指针</title>
    <link href="http://akaduo2019.github.io/2020/08/30/const%E4%B8%8E%E6%8C%87%E9%92%88/"/>
    <id>http://akaduo2019.github.io/2020/08/30/const%E4%B8%8E%E6%8C%87%E9%92%88/</id>
    <published>2020-08-30T08:38:00.000Z</published>
    <updated>2020-09-17T11:48:04.599Z</updated>
    
    <content type="html"><![CDATA[<p>1.常指针<br>语法: void(基类型名) *const 指针名=地址值;</p><p>2.指向常量的指针<br>语法：void const <em>指针名; || const void</em>指针名;</p><p>3.指向常量的常指针<br>语法: const void *const 指针名=地址值;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.常指针&lt;br&gt;语法: void(基类型名) *const 指针名=地址值;&lt;/p&gt;
&lt;p&gt;2.指向常量的指针&lt;br&gt;语法：void const &lt;em&gt;指针名; || const void&lt;/em&gt;指针名;&lt;/p&gt;
&lt;p&gt;3.指向常量的常指针&lt;br&gt;语法: const 
      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>临时对象的产生</title>
    <link href="http://akaduo2019.github.io/2020/08/30/%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1/"/>
    <id>http://akaduo2019.github.io/2020/08/30/%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-08-30T08:02:02.624Z</published>
    <updated>2020-09-17T11:48:11.910Z</updated>
    
    <content type="html"><![CDATA[<p>  1.以值的方式给函数传参；//以引用的方式传递时不会产生临时对象<br>  2.类型转换；<br>  3.函数需要返回一个对象时;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  1.以值的方式给函数传参；//以引用的方式传递时不会产生临时对象&lt;br&gt;  2.类型转换；&lt;br&gt;  3.函数需要返回一个对象时;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>c++中的new与delete</title>
    <link href="http://akaduo2019.github.io/2020/08/30/new%E4%B8%8Edelete/"/>
    <id>http://akaduo2019.github.io/2020/08/30/new%E4%B8%8Edelete/</id>
    <published>2020-08-30T02:11:10.591Z</published>
    <updated>2020-09-17T11:48:37.673Z</updated>
    
    <content type="html"><![CDATA[<p>new与delte都为运算符而非库函数</p><hr><p>new</p><p>定义符号常量 const int N=…; const int M=…;<br>定义变量 int型指针p，二级指针q，int型i，j;</p><p>申请一个int型动态变量:p=new int;</p><p>申请N个元素的动态一维数组:p=new int[N];</p><p>申请N行M列的动态二维数组：q=new int[N];<br>                         for (i=0;i&lt;N;i++)<br>                          q[i]=new int[M];<br>数组元素可用q[i][j]调用</p><p>注:1.new申请的动态内存空间中存放的为随机值<br>   2.p=new int(10); 相当于 p=new int;*p=10;</p><hr><p>delete</p><p>释放一个int型的动态变量：deelte p;<br>释放N个元素的动态一维数组: delete[]p;<br>释放N行M列的动态二维数组：for(i=0;i&lt;N;i++)<br>                            delete []q[i];<br>                        delete []q;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;new与delte都为运算符而非库函数&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;new&lt;/p&gt;
&lt;p&gt;定义符号常量 const int N=…; const int M=…;&lt;br&gt;定义变量 int型指针p，二级指针q，int型i，j;&lt;/p&gt;
&lt;p&gt;申请一个int型动态变量:p=new 
      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>c++中的string类型</title>
    <link href="http://akaduo2019.github.io/2020/04/03/string%E7%B1%BB%E5%9E%8B/"/>
    <id>http://akaduo2019.github.io/2020/04/03/string%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-04-02T16:32:27.315Z</published>
    <updated>2020-09-17T11:48:42.555Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"student"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1; <span class="comment">//可用getline(cin,s1)读入待空格的串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2.length() &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//string 串名.length() 求串长</span></span><br><span class="line"></span><br><span class="line">s2.insert(<span class="number">7</span>,<span class="string">"&amp;Teacher"</span>);<span class="comment">//向串s2下标为7处中插入 &amp;Teacher</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为student&amp;Teacher</span></span><br><span class="line"></span><br><span class="line">s2.replace(<span class="number">2</span>,<span class="number">4</span>,<span class="string">"ar"</span>);<span class="comment">//将串s2的 以下标2处为起始位置,长度为4的子串  替换成ar</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为start&amp;Teacher</span></span><br><span class="line"></span><br><span class="line">s1=s2.substr(<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//提取串s2中 从下标6开始，长度为7的子串 ，并赋值给s1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为Teacher</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos =s2.<span class="built_in">find</span>(s1);<span class="comment">//在串s2中寻找s1串是否存在,若存在则返回s1串的第一个字符在s3中的下标</span></span><br><span class="line"></span><br><span class="line">s2.erase(<span class="number">5</span>,<span class="number">8</span>);<span class="comment">//删除串s2的从5下标开始的长度为8的子串</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>c_str()函数返回一个指向正规C字符串的指针, 内容与本string串相同.</p></blockquote><p>这是为了与c语言兼容，在c语言中没有string类型，故必须通过string类对象的成员函数c_str()把string 对象转换成c中的字符串样式。</p><p>注意:一定要使用strcpy()函数 等来操作方法c_str()返回的指针</p><p>1、比如:最好不要这样:</p><p>char* c;</p><p>string s=”1234”;</p><p>c = s.c_str(); //c最后指向的内容是垃圾，因为s对象被析构，所以不能直接利用c_str返回的字符串，要利用strcpy等函数进行复制后再使用</p><p>2、其内容被处理应该这样用:</p><p>char c[20];</p><p>string s=”1234”;</p><p>strcpy(c,s.c_str());</p><p>这样才不会出错，c_str()返回的是一个临时指针，不能对其进行操作。</p><p>3、再举个例子c_str() 以 char* 形式传回 string 内含字符串如果一个函数要求char*参数，可以使用c_str()方法:</p><p>string s = “Hello World!”;</p><p>printf(“%s”, s.c_str()); //输出 “Hello World!”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>hello-world</title>
    <link href="http://akaduo2019.github.io/2019/11/23/hello-world/"/>
    <id>http://akaduo2019.github.io/2019/11/23/hello-world/</id>
    <published>2019-11-23T13:16:35.000Z</published>
    <updated>2020-04-02T16:16:23.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello world&quot;&gt;&lt;/a&gt;Hello world&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="test" scheme="http://akaduo2019.github.io/categories/test/"/>
    
    
      <category term="test" scheme="http://akaduo2019.github.io/tags/test/"/>
    
  </entry>
  
</feed>
