<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TTTTTempest</title>
  
  <subtitle>无名之辈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://akaduo2019.github.io/"/>
  <updated>2020-10-03T03:33:07.321Z</updated>
  <id>http://akaduo2019.github.io/</id>
  
  <author>
    <name>akaduo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作列表</title>
    <link href="http://akaduo2019.github.io/2020/10/03/%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/"/>
    <id>http://akaduo2019.github.io/2020/10/03/%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</id>
    <published>2020-10-03T02:49:06.563Z</published>
    <updated>2020-10-03T03:33:07.321Z</updated>
    
    <content type="html"><![CDATA[<p>一、遍历列表<br>for tempest in list:<br>    代码块</p><p>注:注意缩进</p><hr><p>二、创建数值列表<br>①range()  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><p>输出：1 2 3 4</p><p>range()可指定步长<br>例子，打印1~10内的偶数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">even_numbers=list(range(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br><span class="line">print(even_numbers)</span><br></pre></td></tr></table></figure><p>输出：[2,4,6,8,10]<br>②可使用list()range()的结果直接转换为列表。如果将range()作为list()的参数，<br>输出将为一个数字列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers=list(range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure><p>输出：[1,2,3,4,5]</p><p>③min() max() sum() 简单处理数字列表的python函数</p><p>④列表解析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、遍历列表&lt;br&gt;for tempest in list:&lt;br&gt;    代码块&lt;/p&gt;
&lt;p&gt;注:注意缩进&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;二、创建数值列表&lt;br&gt;①range()  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="python" scheme="http://akaduo2019.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>操作列表</title>
    <link href="http://akaduo2019.github.io/2020/09/17/python3%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/"/>
    <id>http://akaduo2019.github.io/2020/09/17/python3%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</id>
    <published>2020-09-17T12:33:20.787Z</published>
    <updated>2020-09-18T11:20:05.656Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="python" scheme="http://akaduo2019.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>列表初入</title>
    <link href="http://akaduo2019.github.io/2020/09/17/python2%E5%88%97%E8%A1%A8%E5%88%9D%E5%85%A5/"/>
    <id>http://akaduo2019.github.io/2020/09/17/python2%E5%88%97%E8%A1%A8%E5%88%9D%E5%85%A5/</id>
    <published>2020-09-17T12:00:37.924Z</published>
    <updated>2020-10-03T02:50:48.587Z</updated>
    
    <content type="html"><![CDATA[<p>一、增删列表元素怒</p><p>在列表中添加元素</p><ol><li><p>list.append(‘Tempest’) 在列表末尾添加元素</p></li><li><p>list.insert(num,’Tempest’) 在列表任何位置添加新元素</p></li></ol><hr><p>在列表中删除元素</p><ol><li><p>del list[num]   使用del语句可删除任何位置处列表元素，条件时知道其索引</p></li><li><p>list.pop()    删除列表末尾的元素<br>list.pop(num) 删除列表任何位置元素<br>message=list.pop() 可以在删除元素的同时保存它</p></li></ol><p>注:如果你不确定该使用del 语句还是pop() 方法，下面是一个简单的判断标准：如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del 语句；如果你要在删除元素后还能继续使用它，就使用方法pop()<br>3. list.remove(‘Tempest’) 根据值删除元素<br>   注:①可在删除元素前保存它，再进行删除操作<br>      ②remove()方法只删除第一个指定的值(一个要删除的值可能在列表中出现多次)</p><p>二、组织列表</p><ol><li><p>list.sort() 对列表进行永久性排序<br>list.sort(reverse=True)  反向 永久性排序</p></li><li><p>sorted(list) 对列表进行临时排序，返回值是临时排序的列表</p></li><li><p>list.reverse() 反转列表元素的排列顺序<br>注:①reverse() 不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序<br>   ②reverse() 永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse() 即可</p></li><li><p>len(list) 函数len()可快速获取列表的长度</p></li></ol><p>三、补充</p><p>需要访问最后一个列表元素时，都可使用所以-1，例：list[-1]<br>仅当列表为空时，这种访问最后一个元素的方式才会报错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、增删列表元素怒&lt;/p&gt;
&lt;p&gt;在列表中添加元素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;list.append(‘Tempest’) 在列表末尾添加元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list.insert(num,’Tempest’) 在列表任何位置添加新元素&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://akaduo2019.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>C++中的for循环的语法</title>
    <link href="http://akaduo2019.github.io/2020/09/16/C++%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
    <id>http://akaduo2019.github.io/2020/09/16/C++%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF%E7%9A%84%E8%AF%AD%E6%B3%95/</id>
    <published>2020-09-16T15:02:57.330Z</published>
    <updated>2020-09-17T11:48:02.049Z</updated>
    
    <content type="html"><![CDATA[<p>C++ 中 for 循环的语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( init; condition; increment )</span><br><span class="line">&#123;</span><br><span class="line">   statement(s);</span><br></pre></td></tr></table></figure><p>下面是 for 循环的控制流：</p><p>init 会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。<br>接下来，会判断 condition。如果为真，则执行循环主体。如果为假，则不执行循环主体，且控制流会跳转到紧接着 for 循环的下一条语句。<br>在执行完 for 循环主体后，控制流会跳回上面的 increment 语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。<br>条件再次被判断。如果为真，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为假时，for 循环终止。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++ 中 for 循环的语法：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="http://akaduo2019.github.io/2020/09/14/python2%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://akaduo2019.github.io/2020/09/14/python2%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-09-14T02:56:36.371Z</published>
    <updated>2020-09-17T12:33:34.108Z</updated>
    
    <content type="html"><![CDATA[<p>一、修改字符串大小写</p><ol><li>string.title()  令首字母大写</li><li>string.upper()  令字符串字母全部改为大写</li><li>string.lower()  令字符串字母全部改为小写</li></ol><hr><p>二、删除空白(泛指任何非打印字符,如空格、制表符和换行符)</p><ol><li>string.rstrip() 删除字符串末尾空白</li><li>string.lstrip() 删除字符串开头空白</li><li>string.strip()  同时删除字符串两端的空白<br>注:但这种删除只是暂时的，接下来再次访问sting的值时会发现仍包含多余空白。若需要永久删除整个字符串中的空白，必须将删除操作的结果存回变量中<br>如:string=string.rstrip()</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、修改字符串大小写&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;string.title()  令首字母大写&lt;/li&gt;
&lt;li&gt;string.upper()  令字符串字母全部改为大写&lt;/li&gt;
&lt;li&gt;string.lower()  令字符串字母全部改为小写&lt;/li&gt;
&lt;/ol&gt;
&lt;hr
      
    
    </summary>
    
    
      <category term="python" scheme="http://akaduo2019.github.io/categories/python/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://akaduo2019.github.io/2020/09/01/%E6%97%A0%E9%A2%981/"/>
    <id>http://akaduo2019.github.io/2020/09/01/%E6%97%A0%E9%A2%981/</id>
    <published>2020-09-01T06:42:32.426Z</published>
    <updated>2020-09-17T11:48:22.244Z</updated>
    
    <content type="html"><![CDATA[<p>在定义一个派生类对象时，构造函数的调用顺序如下：<br>1、虚基类的构造函数<br>2、非虚基类的构造函数<br>3、派生类对象成员的构造函数(按定义顺序)<br>4、派生类构造函数</p><hr><p>析构函数的调用次序正好与构造函数的调用次序相反</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在定义一个派生类对象时，构造函数的调用顺序如下：&lt;br&gt;1、虚基类的构造函数&lt;br&gt;2、非虚基类的构造函数&lt;br&gt;3、派生类对象成员的构造函数(按定义顺序)&lt;br&gt;4、派生类构造函数&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;析构函数的调用次序正好与构造函数的调用次序相反&lt;/p&gt;
&lt;hr&gt;

      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>const与指针</title>
    <link href="http://akaduo2019.github.io/2020/08/30/const%E4%B8%8E%E6%8C%87%E9%92%88/"/>
    <id>http://akaduo2019.github.io/2020/08/30/const%E4%B8%8E%E6%8C%87%E9%92%88/</id>
    <published>2020-08-30T08:38:00.000Z</published>
    <updated>2020-09-17T11:48:04.599Z</updated>
    
    <content type="html"><![CDATA[<p>1.常指针<br>语法: void(基类型名) *const 指针名=地址值;</p><p>2.指向常量的指针<br>语法：void const <em>指针名; || const void</em>指针名;</p><p>3.指向常量的常指针<br>语法: const void *const 指针名=地址值;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.常指针&lt;br&gt;语法: void(基类型名) *const 指针名=地址值;&lt;/p&gt;
&lt;p&gt;2.指向常量的指针&lt;br&gt;语法：void const &lt;em&gt;指针名; || const void&lt;/em&gt;指针名;&lt;/p&gt;
&lt;p&gt;3.指向常量的常指针&lt;br&gt;语法: const 
      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>临时对象的产生</title>
    <link href="http://akaduo2019.github.io/2020/08/30/%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1/"/>
    <id>http://akaduo2019.github.io/2020/08/30/%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-08-30T08:02:02.624Z</published>
    <updated>2020-09-17T11:48:11.910Z</updated>
    
    <content type="html"><![CDATA[<p>  1.以值的方式给函数传参；//以引用的方式传递时不会产生临时对象<br>  2.类型转换；<br>  3.函数需要返回一个对象时;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  1.以值的方式给函数传参；//以引用的方式传递时不会产生临时对象&lt;br&gt;  2.类型转换；&lt;br&gt;  3.函数需要返回一个对象时;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>c++中的new与delete</title>
    <link href="http://akaduo2019.github.io/2020/08/30/new%E4%B8%8Edelete/"/>
    <id>http://akaduo2019.github.io/2020/08/30/new%E4%B8%8Edelete/</id>
    <published>2020-08-30T02:11:10.591Z</published>
    <updated>2020-09-17T11:48:37.673Z</updated>
    
    <content type="html"><![CDATA[<p>new与delte都为运算符而非库函数</p><hr><p>new</p><p>定义符号常量 const int N=…; const int M=…;<br>定义变量 int型指针p，二级指针q，int型i，j;</p><p>申请一个int型动态变量:p=new int;</p><p>申请N个元素的动态一维数组:p=new int[N];</p><p>申请N行M列的动态二维数组：q=new int[N];<br>                         for (i=0;i&lt;N;i++)<br>                          q[i]=new int[M];<br>数组元素可用q[i][j]调用</p><p>注:1.new申请的动态内存空间中存放的为随机值<br>   2.p=new int(10); 相当于 p=new int;*p=10;</p><hr><p>delete</p><p>释放一个int型的动态变量：deelte p;<br>释放N个元素的动态一维数组: delete[]p;<br>释放N行M列的动态二维数组：for(i=0;i&lt;N;i++)<br>                            delete []q[i];<br>                        delete []q;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;new与delte都为运算符而非库函数&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;new&lt;/p&gt;
&lt;p&gt;定义符号常量 const int N=…; const int M=…;&lt;br&gt;定义变量 int型指针p，二级指针q，int型i，j;&lt;/p&gt;
&lt;p&gt;申请一个int型动态变量:p=new 
      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>c++中的string类型</title>
    <link href="http://akaduo2019.github.io/2020/04/03/string%E7%B1%BB%E5%9E%8B/"/>
    <id>http://akaduo2019.github.io/2020/04/03/string%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-04-02T16:32:27.315Z</published>
    <updated>2020-09-17T11:48:42.555Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"student"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1; <span class="comment">//可用getline(cin,s1)读入待空格的串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2.length() &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//string 串名.length() 求串长</span></span><br><span class="line"></span><br><span class="line">s2.insert(<span class="number">7</span>,<span class="string">"&amp;Teacher"</span>);<span class="comment">//向串s2下标为7处中插入 &amp;Teacher</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为student&amp;Teacher</span></span><br><span class="line"></span><br><span class="line">s2.replace(<span class="number">2</span>,<span class="number">4</span>,<span class="string">"ar"</span>);<span class="comment">//将串s2的 以下标2处为起始位置,长度为4的子串  替换成ar</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为start&amp;Teacher</span></span><br><span class="line"></span><br><span class="line">s1=s2.substr(<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//提取串s2中 从下标6开始，长度为7的子串 ，并赋值给s1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为Teacher</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos =s2.<span class="built_in">find</span>(s1);<span class="comment">//在串s2中寻找s1串是否存在,若存在则返回s1串的第一个字符在s3中的下标</span></span><br><span class="line"></span><br><span class="line">s2.erase(<span class="number">5</span>,<span class="number">8</span>);<span class="comment">//删除串s2的从5下标开始的长度为8的子串</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>c_str()函数返回一个指向正规C字符串的指针, 内容与本string串相同.</p></blockquote><p>这是为了与c语言兼容，在c语言中没有string类型，故必须通过string类对象的成员函数c_str()把string 对象转换成c中的字符串样式。</p><p>注意:一定要使用strcpy()函数 等来操作方法c_str()返回的指针</p><p>1、比如:最好不要这样:</p><p>char* c;</p><p>string s=”1234”;</p><p>c = s.c_str(); //c最后指向的内容是垃圾，因为s对象被析构，所以不能直接利用c_str返回的字符串，要利用strcpy等函数进行复制后再使用</p><p>2、其内容被处理应该这样用:</p><p>char c[20];</p><p>string s=”1234”;</p><p>strcpy(c,s.c_str());</p><p>这样才不会出错，c_str()返回的是一个临时指针，不能对其进行操作。</p><p>3、再举个例子c_str() 以 char* 形式传回 string 内含字符串如果一个函数要求char*参数，可以使用c_str()方法:</p><p>string s = “Hello World!”;</p><p>printf(“%s”, s.c_str()); //输出 “Hello World!”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="c++" scheme="http://akaduo2019.github.io/categories/c/"/>
    
    
      <category term="notes" scheme="http://akaduo2019.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>hello-world</title>
    <link href="http://akaduo2019.github.io/2019/11/23/hello-world/"/>
    <id>http://akaduo2019.github.io/2019/11/23/hello-world/</id>
    <published>2019-11-23T13:16:35.000Z</published>
    <updated>2020-04-02T16:16:23.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-world&quot;&gt;&lt;a href=&quot;#Hello-world&quot; class=&quot;headerlink&quot; title=&quot;Hello world&quot;&gt;&lt;/a&gt;Hello world&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="test" scheme="http://akaduo2019.github.io/categories/test/"/>
    
    
      <category term="test" scheme="http://akaduo2019.github.io/tags/test/"/>
    
  </entry>
  
</feed>
