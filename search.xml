<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++中的for循环的语法</title>
    <url>/2020/11/21/C++%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>C++ 中 for 循环的语法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( init; condition; increment )</span><br><span class="line">&#123;</span><br><span class="line">   statement(s);</span><br></pre></td></tr></table></figure>

<p>下面是 for 循环的控制流：</p>
<p>init 会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。<br>接下来，会判断 condition。如果为真，则执行循环主体。如果为假，则不执行循环主体，且控制流会跳转到紧接着 for 循环的下一条语句。<br>在执行完 for 循环主体后，控制流会跳回上面的 increment 语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。<br>条件再次被判断。如果为真，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为假时，for 循环终止。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/2019/11/23/hello-world/</url>
    <content><![CDATA[<h2><span id="hello-world">Hello world</span></h2>]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>const与指针</title>
    <url>/2020/08/30/const%E4%B8%8E%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p>1.常指针<br>语法: void(基类型名) *const 指针名=地址值;</p>
<p>2.指向常量的指针<br>语法：void const <em>指针名; || const void</em>指针名;</p>
<p>3.指向常量的常指针<br>语法: const void *const 指针名=地址值;</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>列表初入</title>
    <url>/2020/11/21/python%E5%88%97%E8%A1%A8%E5%88%9D%E5%85%A5/</url>
    <content><![CDATA[<p>一、增删列表元素怒</p>
<p>在列表中添加元素</p>
<ol>
<li><p>list.append(‘Tempest’) 在列表末尾添加元素</p>
</li>
<li><p>list.insert(num,’Tempest’) 在列表任何位置添加新元素</p>
</li>
</ol>
<hr>
<p>在列表中删除元素</p>
<ol>
<li><p>del list[num]   使用del语句可删除任何位置处列表元素，条件时知道其索引</p>
</li>
<li><p>list.pop()    删除列表末尾的元素<br>list.pop(num) 删除列表任何位置元素<br>message=list.pop() 可以在删除元素的同时保存它</p>
</li>
</ol>
<p>注:如果你不确定该使用del 语句还是pop() 方法，下面是一个简单的判断标准：如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del 语句；如果你要在删除元素后还能继续使用它，就使用方法pop()<br>3. list.remove(‘Tempest’) 根据值删除元素<br>   注:①可在删除元素前保存它，再进行删除操作<br>      ②remove()方法只删除第一个指定的值(一个要删除的值可能在列表中出现多次)</p>
<p>二、组织列表</p>
<ol>
<li><p>list.sort() 对列表进行永久性排序<br>list.sort(reverse=True)  反向 永久性排序</p>
</li>
<li><p>sorted(list) 对列表进行临时排序，返回值是临时排序的列表</p>
</li>
<li><p>list.reverse() 反转列表元素的排列顺序<br>注:①reverse() 不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序<br>   ②reverse() 永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse() 即可</p>
</li>
<li><p>len(list) 函数len()可快速获取列表的长度</p>
</li>
</ol>
<p>三、补充</p>
<p>需要访问最后一个列表元素时，都可使用所以-1，例：list[-1]<br>仅当列表为空时，这种访问最后一个元素的方式才会报错</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2020/11/21/python%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>一、修改字符串大小写</p>
<ol>
<li>string.title()  令首字母大写</li>
<li>string.upper()  令字符串字母全部改为大写</li>
<li>string.lower()  令字符串字母全部改为小写</li>
</ol>
<hr>
<p>二、删除空白(泛指任何非打印字符,如空格、制表符和换行符)</p>
<ol>
<li>string.rstrip() 删除字符串末尾空白</li>
<li>string.lstrip() 删除字符串开头空白</li>
<li>string.strip()  同时删除字符串两端的空白<br>注:但这种删除只是暂时的，接下来再次访问sting的值时会发现仍包含多余空白。若需要永久删除整个字符串中的空白，必须将删除操作的结果存回变量中<br>如:string=string.rstrip()</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>c++中的new与delete</title>
    <url>/2020/11/21/new%E4%B8%8Edelete/</url>
    <content><![CDATA[<p>new与delte都为运算符而非库函数</p>
<hr>
<p>new</p>
<p>定义符号常量 const int N=…; const int M=…;<br>定义变量 int型指针p，二级指针q，int型i，j;</p>
<p>申请一个int型动态变量:p=new int;</p>
<p>申请N个元素的动态一维数组:p=new int[N];</p>
<p>申请N行M列的动态二维数组：q=new int[N];<br>                         for (i=0;i&lt;N;i++)<br>                          q[i]=new int[M];<br>数组元素可用q[i][j]调用</p>
<p>注:1.new申请的动态内存空间中存放的为随机值<br>   2.p=new int(10); 相当于 p=new int;*p=10;</p>
<hr>
<p>delete</p>
<p>释放一个int型的动态变量：deelte p;<br>释放N个元素的动态一维数组: delete[]p;<br>释放N行M列的动态二维数组：for(i=0;i&lt;N;i++)<br>                            delete []q[i];<br>                        delete []q;</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>类的继承</title>
    <url>/2020/11/21/python%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<p>创建子类的实例时，Python首先要完成的任务时给父类所有属性赋值。为此，子类的方法<strong>init</strong>()需要父类施以援手：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,height,weight,age)</span>:</span></span><br><span class="line">        --snip--</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span><span class="params">(Father)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,height,weight,age)</span>:</span></span><br><span class="line">        super().__init__(height,weight,age)</span><br><span class="line">        --snip--</span><br></pre></td></tr></table></figure>

<p>创建子类时，父类必须包含在当前文件中，且位于子类前面。<br>定义子类时，必须在括号内指定父类名称。<br>super()是一个特殊函数，帮助Python将父类和子类关联起来：这行代码让Python调用父类的方法<strong>init</strong>(),让子类实例包含父类的所有属性。</p>
<hr>
<p>私有属性和私有方法</p>
<p>在属性名或方法名前加上__</p>
<hr>
<p>1.直接调用父类属性和方法<br>2.重写父类属性和方法<br>3.强制调用父类私有属性方法<br>4.调用父类的<strong>init</strong>方法<br>5.继承父类初始化过程中的参数</p>
<blockquote>
<p>详见<a href="https://blog.csdn.net/yilulvxing/article/details/85374142" target="_blank" rel="noopener">https://blog.csdn.net/yilulvxing/article/details/85374142</a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>中缀表达式转后缀表达式</title>
    <url>/2020/11/21/%E4%B8%AD%E7%BC%80to%E5%90%8E%E7%BC%80/</url>
    <content><![CDATA[<p>将中缀表达式转换为后缀表达式:<br>Ⅰ.从左向右遍历</p>
<p>Ⅱ.遇到运算数直接输出</p>
<p>Ⅲ.遇到左括号，直接压入堆栈（入栈前，左括号优先级最高，入栈后，优先级降到最低，确保其他符号正常入栈）</p>
<p>Ⅳ.遇到右括号，不但弹出栈顶运算符并输出，直到遇到左括号，左括号弹出但不输出</p>
<p>Ⅵ.遇到运算符，将该运算符与栈顶运算符比较：<br>       ①若优先级高于栈顶运算符则压入堆栈<br>       ②若优先级低于或等于栈顶运算符，则将栈顶运算符弹出并输出，然后比较新的栈顶运算符<br>       ③栈为空时，直接压入堆栈<br>Ⅵ.遍历完后，按顺序弹出并输出栈中的所有运算符</p>
<hr>
<p>后缀表达式的计算：<br>Ⅰ.从左到右遍历</p>
<p>Ⅱ.遇到运算数，将运算数压入堆栈</p>
<p>Ⅲ.遇到运算符，弹出栈顶相应的运算数，然后进行计算，将计算结果压入堆栈</p>
<p>Ⅳ.最终结果即是栈顶元素的值</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>c++中的string类型</title>
    <url>/2020/11/21/string%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"student"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1; <span class="comment">//可用getline(cin,s1)读入待空格的串</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2.length() &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//string 串名.length() 求串长</span></span><br><span class="line"></span><br><span class="line">s2.insert(<span class="number">7</span>,<span class="string">"&amp;Teacher"</span>);<span class="comment">//向串s2下标为7处中插入 &amp;Teacher</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为student&amp;Teacher</span></span><br><span class="line"></span><br><span class="line">s2.replace(<span class="number">2</span>,<span class="number">4</span>,<span class="string">"ar"</span>);<span class="comment">//将串s2的 以下标2处为起始位置,长度为4的子串  替换成ar</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2&lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为start&amp;Teacher</span></span><br><span class="line"></span><br><span class="line">s1=s2.substr(<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//提取串s2中 从下标6开始，长度为7的子串 ，并赋值给s1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出结果为Teacher</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos =s2.<span class="built_in">find</span>(s1);<span class="comment">//在串s2中寻找s1串是否存在,若存在则返回s1串的第一个字符在s3中的下标</span></span><br><span class="line"></span><br><span class="line">s2.erase(<span class="number">5</span>,<span class="number">8</span>);<span class="comment">//删除串s2的从5下标开始的长度为8的子串</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>c_str()函数返回一个指向正规C字符串的指针, 内容与本string串相同.</p>
</blockquote>
<p>这是为了与c语言兼容，在c语言中没有string类型，故必须通过string类对象的成员函数c_str()把string 对象转换成c中的字符串样式。</p>
<p>注意:一定要使用strcpy()函数 等来操作方法c_str()返回的指针</p>
<p>1、比如:最好不要这样:</p>
<p>char* c;</p>
<p>string s=”1234”;</p>
<p>c = s.c_str(); //c最后指向的内容是垃圾，因为s对象被析构，所以不能直接利用c_str返回的字符串，要利用strcpy等函数进行复制后再使用</p>
<p>2、其内容被处理应该这样用:</p>
<p>char c[20];</p>
<p>string s=”1234”;</p>
<p>strcpy(c,s.c_str());</p>
<p>这样才不会出错，c_str()返回的是一个临时指针，不能对其进行操作。</p>
<p>3、再举个例子c_str() 以 char* 形式传回 string 内含字符串如果一个函数要求char*参数，可以使用c_str()方法:</p>
<p>string s = “Hello World!”;</p>
<p>printf(“%s”, s.c_str()); //输出 “Hello World!”</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>分支备份测试</title>
    <url>/2020/11/21/%E5%88%86%E6%94%AF%E5%A4%87%E4%BB%BD%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>test</p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>临时对象的产生</title>
    <url>/2020/11/21/%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>1.以值的方式给函数传参；//以引用的方式传递时不会产生临时对象<br>  2.类型转换；<br>  3.函数需要返回一个对象时;</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/2020/11/21/%E6%97%A0%E9%A2%981/</url>
    <content><![CDATA[<p>在定义一个派生类对象时，构造函数的调用顺序如下：<br>1、虚基类的构造函数<br>2、非虚基类的构造函数<br>3、派生类对象成员的构造函数(按定义顺序)<br>4、派生类构造函数</p>
<hr>
<p>析构函数的调用次序正好与构造函数的调用次序相反</p>
<hr>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>求主析取范式和主合取范式</title>
    <url>/2020/11/21/%E7%A6%BB%E6%95%A3%E5%AE%9E%E9%AA%8C1/</url>
    <content><![CDATA[<p>编程实现用真值表法求取含n个变元的合式公式所对应的主析取范式和主合取范式。<br>要求：<br>能够列出合式公式的真值表并给出相应主析取和主合取范式。</p>
<a id="more"></a>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对用户输入值进行处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretreatment</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#Ⅰ将用户输入值分割为一个个字符并以列表形式储存；</span></span><br><span class="line">    in_put = input(<span class="string">"或运算为 |  , 与运算为 &amp;   ,单条件为 -&gt;  ,双条件我 &lt;=&gt; ,非运算为 ! ,变元采用大写\n请输入表达式，并以回车结束\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> in_put:</span><br><span class="line">        infix.append(value)</span><br><span class="line">    <span class="comment">#Ⅱ将双条件 &lt;= &gt; 视为 &lt; ；将条件-&gt;视为 -</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">'='</span> <span class="keyword">in</span> infix:</span><br><span class="line">        infix.remove(<span class="string">'='</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">'&gt;'</span> <span class="keyword">in</span> infix:</span><br><span class="line">        infix.remove(<span class="string">'&gt;'</span>)</span><br><span class="line">    <span class="comment">#Ⅲ 将合式中的变元储存到列表alpha中</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> infix:</span><br><span class="line">        <span class="keyword">if</span> value &lt;= <span class="string">'Z'</span> <span class="keyword">and</span> value &gt;= <span class="string">'A'</span>:</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">not</span> <span class="keyword">in</span> alpha:</span><br><span class="line">                alpha.append(value)</span><br><span class="line"><span class="comment">#中缀表达式转化为后缀表达式的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infix_to_suffix</span><span class="params">(_infix)</span>:</span></span><br><span class="line">    <span class="comment"># 清空stack</span></span><br><span class="line">    stack.clear()</span><br><span class="line">    <span class="comment"># 从左向右遍历</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> _infix:</span><br><span class="line">        <span class="comment"># 当遇到运算数时直接输出</span></span><br><span class="line">        <span class="keyword">if</span> value &lt;= <span class="string">'Z'</span> <span class="keyword">and</span> value &gt;= <span class="string">'A'</span>:</span><br><span class="line">            suffix.append(value)</span><br><span class="line">        <span class="comment"># 遇到左括号为最高优先级，直接压入堆栈，注意入栈后左括号优先级将为最低，确保其他符号正常入栈</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'('</span>:</span><br><span class="line">            stack.append(value)</span><br><span class="line">        <span class="comment"># 遇到右括号，不断弹出栈顶运算符并输出，直到遇到左括号，左括号弹出但不输出</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">')'</span>:</span><br><span class="line">            <span class="keyword">while</span> stack[<span class="number">-1</span>] != <span class="string">'('</span>:</span><br><span class="line">                suffix.append(stack.pop())</span><br><span class="line">            <span class="comment"># 弹出左括号</span></span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="comment"># 若该运算符与栈顶元素比较，其优先级低于等于栈顶元素，应将栈顶运算符弹出并输出，然后与新的栈顶元素符比较；</span></span><br><span class="line">        <span class="comment"># 若栈为空或与栈顶元素比较，优先级高于栈顶元素，则应压入堆栈；</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'|'</span> <span class="keyword">or</span> value ==<span class="string">'&amp;'</span> <span class="keyword">or</span> value ==<span class="string">'-'</span> <span class="keyword">or</span> value ==<span class="string">'&lt;'</span>:</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                <span class="keyword">if</span> stack[<span class="number">-1</span>]==<span class="string">'('</span>:</span><br><span class="line">                    stack.append(value)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    suffix.append(stack.pop())</span><br><span class="line">                    <span class="keyword">if</span> stack:</span><br><span class="line">                        <span class="keyword">while</span> stack[<span class="number">-1</span>] != <span class="string">'('</span>:</span><br><span class="line">                            suffix.append(stack.pop())</span><br><span class="line">                            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                    stack.append(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(value)</span><br><span class="line">        <span class="comment"># 遇到运算符：非</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'!'</span>:</span><br><span class="line">            <span class="comment">#栈不为空</span></span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                <span class="comment">#如果栈顶元素也为 非，那么此时运算符优先级低于或等于栈顶元素优先级，应将栈顶运算符弹出并输出，然后比较新的栈顶运算符</span></span><br><span class="line">                <span class="keyword">if</span> stack[<span class="number">-1</span>] == <span class="string">'!'</span>:</span><br><span class="line">                    suffix.append(stack.pop())</span><br><span class="line">                    <span class="comment"># 当栈不为空且栈顶元素仍为 非 ，则继续比较</span></span><br><span class="line">                    <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>] == <span class="string">'!'</span>:</span><br><span class="line">                        suffix.append(stack.pop())</span><br><span class="line">                    <span class="comment">#弹出到栈顶元素不为非或者栈为空时，将该运算符 非 压入堆栈</span></span><br><span class="line">                    stack.append(value)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stack.append(value)</span><br><span class="line">            <span class="comment">#栈为空，直接压入堆栈</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(value)</span><br><span class="line">    <span class="comment">#最后按顺序弹出栈内值并输出</span></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        suffix.append(stack.pop())</span><br><span class="line"><span class="comment">#后缀表达式对应的真值的计算</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">()</span>:</span></span><br><span class="line">    stack.clear()</span><br><span class="line">    <span class="comment">#从左向右遍历</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> suffix:</span><br><span class="line">        <span class="comment">#遇到运算数，将运算数对应的真值压入堆栈</span></span><br><span class="line">        <span class="keyword">if</span> value &gt;= <span class="string">'A'</span> <span class="keyword">and</span> value &lt;= <span class="string">'Z'</span>:</span><br><span class="line">             stack.append(truth_table[value])</span><br><span class="line">        <span class="comment">#遇到运算符&amp;</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'&amp;'</span>:</span><br><span class="line">            number_1 = stack.pop()</span><br><span class="line">            number_2 = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number_1 == <span class="number">1</span> <span class="keyword">and</span> number_2 == <span class="number">1</span>:</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">#遇到运算符|</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'|'</span>:</span><br><span class="line">            number_1 = stack.pop()</span><br><span class="line">            number_2 = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number_1 == <span class="number">0</span> <span class="keyword">and</span> number_2 == <span class="number">0</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#遇到运算符-&gt;</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'-'</span>:</span><br><span class="line">            number_1 = stack.pop()</span><br><span class="line">            number_2 = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number_1 == <span class="number">0</span> <span class="keyword">and</span> number_2 == <span class="number">1</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#遇到运算符&lt;=&gt;</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'&lt;'</span>:</span><br><span class="line">            number_1 = stack.pop()</span><br><span class="line">            number_2 = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number_1 == number_2 :</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">#遇到运算符！</span></span><br><span class="line">        <span class="keyword">elif</span> value == <span class="string">'!'</span>:</span><br><span class="line">            number = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> number == <span class="number">1</span>:</span><br><span class="line">                stack.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> number == <span class="number">0</span>:</span><br><span class="line">                stack.append(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#返回栈顶元素值，即结果</span></span><br><span class="line">    <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#递归方法实现真值表的全排列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == len(alpha):</span><br><span class="line">        ans = calculate()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">            <span class="keyword">if</span> truth_table[alpha[i]] == <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">"T\t"</span>,end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"F\t"</span>,end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> ans == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">"T\n"</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">                true.append(truth_table[alpha[i]])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"F\n"</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">                false.append(truth_table[alpha[i]])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        truth_table[alpha[num]] = <span class="number">1</span></span><br><span class="line">        recursive(num+<span class="number">1</span>)</span><br><span class="line">        truth_table[alpha[num]] = <span class="number">0</span></span><br><span class="line">        recursive(num+<span class="number">1</span>)</span><br><span class="line"><span class="comment">#求取主析取范式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_to_pdnf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> true:</span><br><span class="line">        print(<span class="string">"主析取范式为："</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(true),len(alpha)):</span><br><span class="line">            j = i % len(alpha)</span><br><span class="line">            print(<span class="string">'('</span>, end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">                print(transform_1(true[i+k])+alpha[j+k],end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">if</span> k&lt;len(alpha)<span class="number">-1</span>:</span><br><span class="line">                    print(<span class="string">'∧'</span>,end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">')'</span>,end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> i &lt; len(true)-len(alpha) <span class="keyword">and</span> len(true) != len(alpha):</span><br><span class="line">                print(<span class="string">"∨"</span>,end=<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"><span class="comment">#求取主合取范式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_to_pcnf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> false:</span><br><span class="line">        print(<span class="string">"主合取范式为："</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(false), len(alpha)):</span><br><span class="line">            j = i % len(alpha)</span><br><span class="line">            print(<span class="string">'('</span>, end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(alpha)):</span><br><span class="line">                print(transform_2(false[i + k]) + alpha[j + k], end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">if</span> k &lt; len(alpha) - <span class="number">1</span>:</span><br><span class="line">                    print(<span class="string">'∨'</span>, end=<span class="string">''</span>)</span><br><span class="line">            print(<span class="string">')'</span>, end=<span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> i &lt; len(false)-len(alpha) <span class="keyword">and</span> len(false) != len(alpha):</span><br><span class="line">                print(<span class="string">'∧'</span>, end=<span class="string">''</span>)</span><br><span class="line">        print(<span class="string">""</span>)</span><br><span class="line"><span class="comment">#析取中非的符号转换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_1</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'¬'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"><span class="comment">#合取中非的符号转换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_2</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">'¬'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">""</span></span><br><span class="line"><span class="comment"># 储存中缀表达式</span></span><br><span class="line">infix = []</span><br><span class="line"><span class="comment"># 储存变元</span></span><br><span class="line">alpha = []</span><br><span class="line"><span class="comment"># 存放转化后的后缀表达式</span></span><br><span class="line">suffix = []</span><br><span class="line"><span class="comment"># 用作中间运算的堆栈</span></span><br><span class="line">stack = []</span><br><span class="line"><span class="comment"># 映射:字典truth_table:key为alpha中的元素，value为0或1</span></span><br><span class="line">truth_table = &#123;&#125;</span><br><span class="line"><span class="comment"># 存放合式为真的情况，用于主析取范式</span></span><br><span class="line">true = []</span><br><span class="line"><span class="comment"># 存放合式为假的情况，用于主合取范式</span></span><br><span class="line">false = []</span><br><span class="line"></span><br><span class="line">pretreatment()</span><br><span class="line">infix_to_suffix(infix)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(alpha)):</span><br><span class="line">    print(alpha[i]+<span class="string">"\t"</span>,end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">"表达式真值"</span>)</span><br><span class="line">recursive(<span class="number">0</span>)</span><br><span class="line">turn_to_pdnf()</span><br><span class="line">turn_to_pcnf()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>experiment</tag>
      </tags>
  </entry>
  <entry>
    <title>集合上二元关系性质的判断</title>
    <url>/2020/11/21/%E7%A6%BB%E6%95%A3%E5%AE%9E%E9%AA%8C2/</url>
    <content><![CDATA[<p>编程实现集合上二元关系性质的判断，并求自反闭包，对称闭包和传递闭包(warshall算法)</p>
<a id="more"></a>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存放输入的集合A</span></span><br><span class="line">A=[]</span><br><span class="line"><span class="comment"># S=A×A</span></span><br><span class="line">S=[]</span><br><span class="line"><span class="comment"># 存放输入的关系R</span></span><br><span class="line">R=[]</span><br><span class="line"><span class="comment"># 存放R的关系矩阵</span></span><br><span class="line">matrix=&#123;&#125;</span><br><span class="line"><span class="comment"># 存放R的自反闭包</span></span><br><span class="line">r_R=[]</span><br><span class="line"><span class="comment"># 存放R的对称闭包</span></span><br><span class="line">s_R=[]</span><br><span class="line"><span class="comment"># 存放R的传递闭包</span></span><br><span class="line">t_R=[]</span><br><span class="line"><span class="comment"># 存放A的恒等关系</span></span><br><span class="line">I_A=[]</span><br><span class="line"><span class="comment"># 存放R的逆关系</span></span><br><span class="line">R_c=[]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_put</span><span class="params">()</span>:</span></span><br><span class="line">    input_A=input(<span class="string">"注:请用英文逗号,大括号,大于号和小于号\n输入集合A,以回车结束\n"</span>)</span><br><span class="line">    input_R=input(<span class="string">"输入集合R,以回车结束\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> input_A:</span><br><span class="line">        A.append(value)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> input_R:</span><br><span class="line">        R.append(value)</span><br><span class="line">    <span class="comment"># 移除A中的, &#123; &#125;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">','</span> <span class="keyword">in</span> A:</span><br><span class="line">        A.remove(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">'&#123;'</span> <span class="keyword">in</span> A:</span><br><span class="line">        A.remove(<span class="string">'&#123;'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">'&#125;'</span> <span class="keyword">in</span> A:</span><br><span class="line">        A.remove(<span class="string">'&#125;'</span>)</span><br><span class="line">    <span class="comment"># 移除R中的&lt;,&gt; &#123; &#125;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">'&lt;'</span> <span class="keyword">in</span> R:</span><br><span class="line">        R.remove(<span class="string">'&lt;'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">'&gt;'</span> <span class="keyword">in</span> R:</span><br><span class="line">        R.remove(<span class="string">'&gt;'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">','</span> <span class="keyword">in</span> R:</span><br><span class="line">        R.remove(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">'&#123;'</span> <span class="keyword">in</span> R:</span><br><span class="line">        R.remove(<span class="string">'&#123;'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">'&#125;'</span> <span class="keyword">in</span> R:</span><br><span class="line">        R.remove(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据S=A×A，求S集合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_to_S</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> value_1 <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">        <span class="keyword">for</span> value_2 <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">            S.append(A[value_1])</span><br><span class="line">            S.append(A[value_2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据R和S求关系矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_to_matrix</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(R),<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(S),<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> R[i] == S[j] <span class="keyword">and</span> R[i+<span class="number">1</span>] == S[j+<span class="number">1</span>]:</span><br><span class="line">                matrix[round(j/<span class="number">2</span>)]=<span class="number">1</span></span><br><span class="line">    <span class="comment"># 补上0，补全矩阵</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">            <span class="keyword">if</span> round(len(A)*i+j) <span class="keyword">not</span> <span class="keyword">in</span> matrix.keys():</span><br><span class="line">                matrix[round(len(A)*i+j)]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断自反性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_reflexivity</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 若flag为True则表示关系矩阵对角线元素全为1，flag预设值为Ture</span></span><br><span class="line">    flag=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">        <span class="keyword">if</span> matrix[len(A)*i+i] != <span class="number">1</span>:</span><br><span class="line">            flag=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        print(<span class="string">"自反"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断对称性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_symmetry</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 若flag为True则表示R对称，预设值为True</span></span><br><span class="line">    flag=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">        <span class="comment"># for…else…的运行逻辑是当for循环正常执行结束就会运行其else语句，如果中途break的话，就不会执行else中的内容</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">            <span class="comment"># 如果不是主对角线元素</span></span><br><span class="line">            <span class="keyword">if</span> len(A)*i+j != len(A)*i+i:</span><br><span class="line">                <span class="comment"># 关于主对角线对称的元素值不相等则，flag=False</span></span><br><span class="line">                <span class="keyword">if</span> matrix[len(A)*i+j] != matrix[len(A)*j+i]:</span><br><span class="line">                    flag=<span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        print(<span class="string">"对称"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断反自反性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_ud_reflexivity</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 若flag为True则表示关系矩阵对角线元素全为0，flag预设值为Ture</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(A)):</span><br><span class="line">        <span class="keyword">if</span> matrix[len(A) * i + i] != <span class="number">0</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        print(<span class="string">"反自反"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断反对称性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_ud_symmetry</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 若flag为True则表示R反对称，预设值为True</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(A)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(A)):</span><br><span class="line">            <span class="comment"># 如果不是主对角线元素</span></span><br><span class="line">            <span class="keyword">if</span> len(A) * i + j != len(A) * i + i:</span><br><span class="line">                <span class="comment"># 关于主对角线对称的元素同时为1，flag=False</span></span><br><span class="line">                <span class="keyword">if</span> matrix[len(A) * i + j] == <span class="number">1</span> <span class="keyword">and</span>  matrix[len(A) * j + i] == <span class="number">1</span>:</span><br><span class="line">                    flag = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        print(<span class="string">"反对称"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断传递性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_transitivity</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 若flag为True则表示R具有传递性，预设值为True</span></span><br><span class="line">    flag=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(R),<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">2</span>,len(R),<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> R[i+<span class="number">1</span>] == R[j]:</span><br><span class="line">                <span class="comment"># 设任意x∈R，y∈R，z∈R，若xRy，yRz可推出xRz，则R具有传递性</span></span><br><span class="line">                <span class="comment"># 若pos=False则代表:当xRy,yRz时, &lt;x,z&gt;不属于R，反之，代表其属于R</span></span><br><span class="line">                pos=<span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(R), <span class="number">2</span>):</span><br><span class="line">                        <span class="keyword">if</span>  R[i] == R[k] <span class="keyword">and</span> R[j+<span class="number">1</span>] == R[k+<span class="number">1</span>]:</span><br><span class="line">                            pos=<span class="literal">True</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pos:</span><br><span class="line">                    flag=<span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">       print(<span class="string">"传递"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求自反闭包,并输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_to_reflexive_closure</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 求A的恒等关系I_A</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">        I_A.append(A[i])</span><br><span class="line">        I_A.append(A[i])</span><br><span class="line">    <span class="comment"># 先将R导入自反闭包r_R</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(R)):</span><br><span class="line">        r_R.append(R[i])</span><br><span class="line">    <span class="comment"># r(R)=R∪IA</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(I_A), <span class="number">2</span>):</span><br><span class="line">        <span class="comment"># flag=True代表A的恒等关系中的该元素不在二元关系R中，应导入对称闭包，flag预设值为True</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(R), <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> R[j] == I_A[i] <span class="keyword">and</span> R[j + <span class="number">1</span>] == I_A[i + <span class="number">1</span>]:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            r_R.append(I_A[i])</span><br><span class="line">            r_R.append(I_A[i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自反闭包输出部分</span></span><br><span class="line">    print(<span class="string">"r(R) = "</span>,end=<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'&#123;'</span>,end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(r_R),<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> i == len(r_R)<span class="number">-2</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span>+r_R[i]+<span class="string">','</span>+r_R[i+<span class="number">1</span>]+<span class="string">'&gt;'</span>,end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span>+r_R[i]+<span class="string">','</span>+r_R[i+<span class="number">1</span>]+<span class="string">'&gt;'</span>+<span class="string">','</span>,end=<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求对称闭包,并输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_to_Symmetric_closure</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 求R的逆关系R_c</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(R),<span class="number">2</span>):</span><br><span class="line">        R_c.append(R[i+<span class="number">1</span>])</span><br><span class="line">        R_c.append(R[i])</span><br><span class="line">    <span class="comment"># 先将R导入对称闭包s_R</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(R)):</span><br><span class="line">        s_R.append(R[i])</span><br><span class="line">    <span class="comment"># s(R)=R∪R^c</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(R_c), <span class="number">2</span>):</span><br><span class="line">        <span class="comment"># flag代表R_c中该元素不在二元关系R中，应导入对称闭包，flag预设值为True</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(R), <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> R[j] == R_c[i] <span class="keyword">and</span> R[j + <span class="number">1</span>] == R_c[i + <span class="number">1</span>]:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            s_R.append(R_c[i])</span><br><span class="line">            s_R.append(R_c[i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#对称闭包输出部分</span></span><br><span class="line">    print(<span class="string">"s(R) = "</span>, end=<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'&#123;'</span>, end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s_R), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> i == len(s_R) - <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span> + s_R[i] + <span class="string">','</span> + s_R[i + <span class="number">1</span>] + <span class="string">'&gt;'</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span> + s_R[i] + <span class="string">','</span> + s_R[i + <span class="number">1</span>] + <span class="string">'&gt;'</span> + <span class="string">','</span>, end=<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求传递闭包 warshall算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn_to_transitive_closure</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#置新矩阵B：=M_R</span></span><br><span class="line">    B=&#123;&#125;</span><br><span class="line">    B=matrix</span><br><span class="line">    <span class="comment">#i为实际行数</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="comment">#j为列数</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">        <span class="comment"># k为处理行数</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">            <span class="comment">#len(A)*k+j 代表一列上的一个元素   遍历完k，即代表一列</span></span><br><span class="line">            <span class="comment">#如果某列上的一个元素等于1，则将该元素处于的行(即处理行)与i的值代表的行(即实际行)进行逻辑加，将结果存于处理行</span></span><br><span class="line">            <span class="keyword">if</span> B[len(A)*k+j] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">0</span>,len(A)):</span><br><span class="line">                    <span class="keyword">if</span> B[len(A)*i+l]==<span class="number">0</span> <span class="keyword">and</span> B[len(A)*k+l]==<span class="number">0</span>:</span><br><span class="line">                        B[len(A)*k+l]=<span class="number">0</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        B[len(A)*k+l]=<span class="number">1</span></span><br><span class="line">        <span class="comment"># 处理完一列将i自增1</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == len(A):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#传递闭包输出部分</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(B)):</span><br><span class="line">        <span class="comment">#B[i]代表关系矩阵中的某一个元素</span></span><br><span class="line">        <span class="keyword">if</span> B[i] == <span class="number">1</span>:</span><br><span class="line">            <span class="comment">#row代表该元素处于哪一行，col代表该元素处于哪一列</span></span><br><span class="line">            row = i // len(A)</span><br><span class="line">            col = i %  len(A)</span><br><span class="line">            <span class="comment">#将该关系矩阵中的这个元素所代表的序偶导入到传递闭包中</span></span><br><span class="line">            t_R.append(S[(row*len(A)+col)*<span class="number">2</span>])</span><br><span class="line">            t_R.append(S[(row*len(A)+col)*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">    print(<span class="string">"t(R) = "</span>, end=<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'&#123;'</span>, end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(t_R), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> i == len(t_R) - <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span> + t_R[i] + <span class="string">','</span> + t_R[i+<span class="number">1</span>] + <span class="string">'&gt;'</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span> + t_R[i] + <span class="string">','</span> + t_R[i+<span class="number">1</span>] + <span class="string">'&gt;'</span> + <span class="string">','</span>, end=<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入A和R</span></span><br><span class="line">in_put()</span><br><span class="line"><span class="comment"># S=A×A</span></span><br><span class="line">turn_to_S()</span><br><span class="line"><span class="comment"># 求出R的关系矩阵matrix</span></span><br><span class="line">print(<span class="string">"在A集合上二元关系R的性质:"</span>)</span><br><span class="line">turn_to_matrix()</span><br><span class="line"><span class="comment"># 判断自反性</span></span><br><span class="line">judge_reflexivity()</span><br><span class="line"><span class="comment"># 判断对称性</span></span><br><span class="line">judge_symmetry()</span><br><span class="line"><span class="comment"># 判断反自反性</span></span><br><span class="line">judge_ud_reflexivity()</span><br><span class="line"><span class="comment"># 判断反对称性</span></span><br><span class="line">judge_ud_symmetry()</span><br><span class="line"><span class="comment"># 判断传递性</span></span><br><span class="line">judge_transitivity()</span><br><span class="line"><span class="comment"># 求自反闭包</span></span><br><span class="line">turn_to_reflexive_closure()</span><br><span class="line"><span class="comment"># 求对称闭包</span></span><br><span class="line">turn_to_Symmetric_closure()</span><br><span class="line"><span class="comment"># 求传递闭包</span></span><br><span class="line">turn_to_transitive_closure()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>experiment</tag>
      </tags>
  </entry>
  <entry>
    <title>置顶测试</title>
    <url>/2020/11/21/%E7%BD%AE%E9%A1%B6%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>test set-top</p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>选课管理系统</title>
    <url>/2020/11/21/%E9%80%89%E8%AF%BE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>app.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> sip</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> runlogin <span class="keyword">import</span> Login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    login = Login()</span><br><span class="line">    login.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<hr>
<p>icons_rc.qrc</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;RCC&gt;</span><br><span class="line">  &lt;qresource prefix=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;file&gt;icons/select_lesson.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/eye_on.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/eye_hide.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/window_icon.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/exit.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/增加课程.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/减少课程.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/重置.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/确认.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/更新.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/查询.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/管理员.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/学生.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/统计.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/选择.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/课程.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/设置.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/注册.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/班级.png&lt;/file&gt;</span><br><span class="line">    &lt;file&gt;icons/下拉.png&lt;/file&gt;</span><br><span class="line">  &lt;/qresource&gt;</span><br><span class="line">&lt;/RCC&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>images.qrc</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;RCC&gt;</span><br><span class="line">  &lt;qresource prefix=<span class="string">"image"</span>&gt;</span><br><span class="line">  &lt;file&gt;images/background.png&lt;/file&gt;</span><br><span class="line">  &lt;/qresource&gt;</span><br><span class="line">&lt;/RCC&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>Login.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_Dialog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, Dialog)</span>:</span></span><br><span class="line">        Dialog.setObjectName(<span class="string">"Dialog"</span>)</span><br><span class="line">        Dialog.setWindowModality(QtCore.Qt.WindowModal)</span><br><span class="line">        Dialog.resize(<span class="number">1050</span>, <span class="number">750</span>)</span><br><span class="line">        Dialog.setMinimumSize(QtCore.QSize(<span class="number">1050</span>, <span class="number">750</span>))</span><br><span class="line">        Dialog.setMaximumSize(QtCore.QSize(<span class="number">1050</span>, <span class="number">750</span>))</span><br><span class="line">        icon = QtGui.QIcon()</span><br><span class="line">        icon.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/window_icon.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        Dialog.setWindowIcon(icon)</span><br><span class="line">        Dialog.setStyleSheet(<span class="string">"font: 10pt \"微软雅黑\";"</span>)</span><br><span class="line">        self.gridLayout_5 = QtWidgets.QGridLayout(Dialog)</span><br><span class="line">        self.gridLayout_5.setObjectName(<span class="string">"gridLayout_5"</span>)</span><br><span class="line">        self.tabWidget = QtWidgets.QTabWidget(Dialog)</span><br><span class="line">        self.tabWidget.setMinimumSize(QtCore.QSize(<span class="number">550</span>, <span class="number">400</span>))</span><br><span class="line">        self.tabWidget.setMaximumSize(QtCore.QSize(<span class="number">550</span>, <span class="number">399</span>))</span><br><span class="line">        self.tabWidget.setStyleSheet(<span class="string">"QPushButton&#123;border-radius: 10px;border: 2px groove gray;border-style: outset;&#125;\n"</span></span><br><span class="line"><span class="string">"QPushButton:hover&#123;color: #66A3FF;background:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,stop: 0 #fafafa, stop: 0.4 #f4f4f4,stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);&#125;\n"</span></span><br><span class="line"><span class="string">"QPushButton:pressed&#123;color: #E680BD;&#125;\n"</span></span><br><span class="line"><span class="string">"QLineEdit&#123;border:0px;margin:10px;border-bottom: 2px solid #B3B3B3&#125;\n"</span></span><br><span class="line"><span class="string">"QLineEdit:hover&#123;border-bottom: 3px solid #66A3FF;&#125;\n"</span></span><br><span class="line"><span class="string">"QLineEdit:focus&#123;border-bottom: 3px solid #E680BD;&#125;\n"</span></span><br><span class="line"><span class="string">"QTabBar::tab:hover&#123;color: #66A3FF;background:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,stop: 0 #fafafa, stop: 0.4 #f4f4f4,stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);&#125;\n"</span></span><br><span class="line"><span class="string">"QTabBar::tab:selected&#123;color: #E680BD;&#125;\n"</span></span><br><span class="line"><span class="string">""</span>)</span><br><span class="line">        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)</span><br><span class="line">        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)</span><br><span class="line">        self.tabWidget.setUsesScrollButtons(<span class="literal">True</span>)</span><br><span class="line">        self.tabWidget.setDocumentMode(<span class="literal">False</span>)</span><br><span class="line">        self.tabWidget.setTabsClosable(<span class="literal">False</span>)</span><br><span class="line">        self.tabWidget.setTabBarAutoHide(<span class="literal">False</span>)</span><br><span class="line">        self.tabWidget.setObjectName(<span class="string">"tabWidget"</span>)</span><br><span class="line">        self.tab = QtWidgets.QWidget()</span><br><span class="line">        self.tab.setObjectName(<span class="string">"tab"</span>)</span><br><span class="line">        self.register_button_student = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.register_button_student.setGeometry(QtCore.QRect(<span class="number">185</span>, <span class="number">210</span>, <span class="number">101</span>, <span class="number">28</span>))</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.register_button_student.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.register_button_student.setSizePolicy(sizePolicy)</span><br><span class="line">        self.register_button_student.setObjectName(<span class="string">"register_button_student"</span>)</span><br><span class="line">        self.login_button_student = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.login_button_student.setGeometry(QtCore.QRect(<span class="number">295</span>, <span class="number">210</span>, <span class="number">101</span>, <span class="number">28</span>))</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.login_button_student.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.login_button_student.setSizePolicy(sizePolicy)</span><br><span class="line">        self.login_button_student.setObjectName(<span class="string">"login_button_student"</span>)</span><br><span class="line">        self.layoutWidget = QtWidgets.QWidget(self.tab)</span><br><span class="line">        self.layoutWidget.setGeometry(QtCore.QRect(<span class="number">150</span>, <span class="number">90</span>, <span class="number">251</span>, <span class="number">111</span>))</span><br><span class="line">        self.layoutWidget.setObjectName(<span class="string">"layoutWidget"</span>)</span><br><span class="line">        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)</span><br><span class="line">        self.verticalLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.verticalLayout.setObjectName(<span class="string">"verticalLayout"</span>)</span><br><span class="line">        self.horizontalLayout = QtWidgets.QHBoxLayout()</span><br><span class="line">        self.horizontalLayout.setObjectName(<span class="string">"horizontalLayout"</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.layoutWidget)</span><br><span class="line">        self.label.setObjectName(<span class="string">"label"</span>)</span><br><span class="line">        self.horizontalLayout.addWidget(self.label)</span><br><span class="line">        self.account_input_student = QtWidgets.QLineEdit(self.layoutWidget)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.account_input_student.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.account_input_student.setSizePolicy(sizePolicy)</span><br><span class="line">        self.account_input_student.setObjectName(<span class="string">"account_input_student"</span>)</span><br><span class="line">        self.horizontalLayout.addWidget(self.account_input_student)</span><br><span class="line">        self.verticalLayout.addLayout(self.horizontalLayout)</span><br><span class="line">        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()</span><br><span class="line">        self.horizontalLayout_3.setObjectName(<span class="string">"horizontalLayout_3"</span>)</span><br><span class="line">        self.label_2 = QtWidgets.QLabel(self.layoutWidget)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.label_2.setSizePolicy(sizePolicy)</span><br><span class="line">        self.label_2.setObjectName(<span class="string">"label_2"</span>)</span><br><span class="line">        self.horizontalLayout_3.addWidget(self.label_2)</span><br><span class="line">        self.password_input_student = QtWidgets.QLineEdit(self.layoutWidget)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.password_input_student.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.password_input_student.setSizePolicy(sizePolicy)</span><br><span class="line">        self.password_input_student.setObjectName(<span class="string">"password_input_student"</span>)</span><br><span class="line">        self.horizontalLayout_3.addWidget(self.password_input_student)</span><br><span class="line">        self.verticalLayout.addLayout(self.horizontalLayout_3)</span><br><span class="line">        icon1 = QtGui.QIcon()</span><br><span class="line">        icon1.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/学生.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.tabWidget.addTab(self.tab, icon1, <span class="string">""</span>)</span><br><span class="line">        self.tab_2 = QtWidgets.QWidget()</span><br><span class="line">        self.tab_2.setObjectName(<span class="string">"tab_2"</span>)</span><br><span class="line">        self.login_button_admin = QtWidgets.QPushButton(self.tab_2)</span><br><span class="line">        self.login_button_admin.setGeometry(QtCore.QRect(<span class="number">235</span>, <span class="number">210</span>, <span class="number">101</span>, <span class="number">28</span>))</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.login_button_admin.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.login_button_admin.setSizePolicy(sizePolicy)</span><br><span class="line">        self.login_button_admin.setObjectName(<span class="string">"login_button_admin"</span>)</span><br><span class="line">        self.layoutWidget1 = QtWidgets.QWidget(self.tab_2)</span><br><span class="line">        self.layoutWidget1.setGeometry(QtCore.QRect(<span class="number">150</span>, <span class="number">90</span>, <span class="number">251</span>, <span class="number">111</span>))</span><br><span class="line">        self.layoutWidget1.setObjectName(<span class="string">"layoutWidget1"</span>)</span><br><span class="line">        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget1)</span><br><span class="line">        self.verticalLayout_2.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.verticalLayout_2.setObjectName(<span class="string">"verticalLayout_2"</span>)</span><br><span class="line">        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()</span><br><span class="line">        self.horizontalLayout_4.setObjectName(<span class="string">"horizontalLayout_4"</span>)</span><br><span class="line">        self.label_4 = QtWidgets.QLabel(self.layoutWidget1)</span><br><span class="line">        self.label_4.setObjectName(<span class="string">"label_4"</span>)</span><br><span class="line">        self.horizontalLayout_4.addWidget(self.label_4)</span><br><span class="line">        self.account_input_admin = QtWidgets.QLineEdit(self.layoutWidget1)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.account_input_admin.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.account_input_admin.setSizePolicy(sizePolicy)</span><br><span class="line">        self.account_input_admin.setObjectName(<span class="string">"account_input_admin"</span>)</span><br><span class="line">        self.horizontalLayout_4.addWidget(self.account_input_admin)</span><br><span class="line">        self.verticalLayout_2.addLayout(self.horizontalLayout_4)</span><br><span class="line">        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()</span><br><span class="line">        self.horizontalLayout_2.setObjectName(<span class="string">"horizontalLayout_2"</span>)</span><br><span class="line">        self.label_3 = QtWidgets.QLabel(self.layoutWidget1)</span><br><span class="line">        self.label_3.setObjectName(<span class="string">"label_3"</span>)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.label_3)</span><br><span class="line">        self.password_input_admin = QtWidgets.QLineEdit(self.layoutWidget1)</span><br><span class="line">        self.password_input_admin.setObjectName(<span class="string">"password_input_admin"</span>)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.password_input_admin)</span><br><span class="line">        self.verticalLayout_2.addLayout(self.horizontalLayout_2)</span><br><span class="line">        icon2 = QtGui.QIcon()</span><br><span class="line">        icon2.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/管理员.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.tabWidget.addTab(self.tab_2, icon2, <span class="string">""</span>)</span><br><span class="line">        self.gridLayout_5.addWidget(self.tabWidget, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Dialog)</span><br><span class="line">        self.tabWidget.setCurrentIndex(<span class="number">0</span>)</span><br><span class="line">        self.login_button_student.clicked.connect(self.login_button_student.show)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Dialog)</span><br><span class="line">        Dialog.setTabOrder(self.tabWidget, self.account_input_student)</span><br><span class="line">        Dialog.setTabOrder(self.account_input_student, self.password_input_student)</span><br><span class="line">        Dialog.setTabOrder(self.password_input_student, self.login_button_student)</span><br><span class="line">        Dialog.setTabOrder(self.login_button_student, self.register_button_student)</span><br><span class="line">        Dialog.setTabOrder(self.register_button_student, self.account_input_admin)</span><br><span class="line">        Dialog.setTabOrder(self.account_input_admin, self.password_input_admin)</span><br><span class="line">        Dialog.setTabOrder(self.password_input_admin, self.login_button_admin)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, Dialog)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Dialog.setWindowTitle(_translate(<span class="string">"Dialog"</span>, <span class="string">"登陆"</span>))</span><br><span class="line">        self.register_button_student.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"注册"</span>))</span><br><span class="line">        self.login_button_student.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"登陆"</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"账号:"</span>))</span><br><span class="line">        self.label_2.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"密码:"</span>))</span><br><span class="line">        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate(<span class="string">"Dialog"</span>, <span class="string">"学生"</span>))</span><br><span class="line">        self.login_button_admin.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"登陆"</span>))</span><br><span class="line">        self.label_4.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"账号:"</span>))</span><br><span class="line">        self.label_3.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"密码:"</span>))</span><br><span class="line">        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate(<span class="string">"Dialog"</span>, <span class="string">"教务"</span>))</span><br><span class="line"><span class="keyword">import</span> icons_rc</span><br><span class="line"><span class="keyword">import</span> images_rc</span><br></pre></td></tr></table></figure>

<hr>
<p>runlogin.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> runmain_student</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Login <span class="keyword">import</span> Ui_Dialog</span><br><span class="line"><span class="keyword">from</span> runmain_student <span class="keyword">import</span> Main</span><br><span class="line"><span class="keyword">from</span> runmain_admin <span class="keyword">import</span> MainAdmin</span><br><span class="line"><span class="keyword">from</span> runregister <span class="keyword">import</span> Register</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(QDialog, Ui_Dialog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Login, self).__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># clicked信号绑定自定义槽login_to_main_student</span></span><br><span class="line">        self.login_button_student.clicked.connect(self.login_to_main_student)</span><br><span class="line">        <span class="comment"># clicked信号绑定自定义槽login_to_main_admin</span></span><br><span class="line">        self.login_button_admin.clicked.connect(self.login_to_main_admin)</span><br><span class="line">        <span class="comment"># clicked信号链接自定义槽jump_to_register_student</span></span><br><span class="line">        self.register_button_student.clicked.connect(self.jump_to_register_student)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置密码文本框显示模式:输入时为密文显示</span></span><br><span class="line">        self.password_input_student.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.password_input_admin.setEchoMode(QLineEdit.Password)</span><br><span class="line">    <span class="comment"># 给登录窗口设置背景</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        pixmap = QPixmap(<span class="string">"./images/background.png"</span>)</span><br><span class="line">        painter.drawPixmap(self.rect(), pixmap)</span><br><span class="line">    <span class="comment"># 学生登陆界面跳转学生主界面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_to_main_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取用户(学生)输入文本框内容,即账号密码</span></span><br><span class="line">        account = self.account_input_student.text()</span><br><span class="line">        password = self.password_input_student.text()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开数据库连接</span></span><br><span class="line">        db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">        <span class="comment"># 使用cursor()方法获取操作游标</span></span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        <span class="comment"># SQL 查询语句</span></span><br><span class="line">        sql = <span class="string">"SELECT *FROM STUDENT_ACCOUNT "</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> cursor.fetchall():</span><br><span class="line">            <span class="keyword">if</span> account == row[<span class="number">0</span>] <span class="keyword">and</span> password == row[<span class="number">1</span>]:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"登陆成功"</span>)</span><br><span class="line">            <span class="comment"># 明确当前账户</span></span><br><span class="line">            sql = <span class="string">"UPDATE NOW_ACCOUNT SET now_account=%s "</span></span><br><span class="line">            cursor.execute(sql, account)</span><br><span class="line">            db.commit()</span><br><span class="line"></span><br><span class="line">            self.close()</span><br><span class="line">            self.main_student = Main()</span><br><span class="line">            self.main_student.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"账号或密码输入错误，请重新输入"</span>)</span><br><span class="line">            <span class="comment"># 清空账号和密码的单行文本框</span></span><br><span class="line">            self.account_input_student.clear()</span><br><span class="line">            self.password_input_student.clear()</span><br><span class="line"></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 教务登录界面跳转管理员主界面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_to_main_admin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取管理员账号和密码</span></span><br><span class="line">        admin_user = self.account_input_admin.text()</span><br><span class="line">        admin_password = self.password_input_admin.text()</span><br><span class="line"></span><br><span class="line">        db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        sql = <span class="string">"SELECT *FROM ADMIN_ACCOUNT"</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        data = cursor.fetchone()</span><br><span class="line">        <span class="keyword">if</span> admin_user == data[<span class="number">0</span>] <span class="keyword">and</span> admin_password == data[<span class="number">1</span>]:</span><br><span class="line">            QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"admin登录成功"</span>)</span><br><span class="line">            self.close()</span><br><span class="line">            self.main_admin = MainAdmin()</span><br><span class="line">            self.main_admin.show()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"admin账号或密码错误，请重新输入"</span>)</span><br><span class="line">            self.account_input_student.clear()</span><br><span class="line">            self.password_input_student.clear()</span><br><span class="line"></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学生登录界面跳转注册界面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump_to_register_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.close()</span><br><span class="line">        self.register = Register()</span><br><span class="line">        self.register.show()</span><br></pre></td></tr></table></figure>

<hr>
<p>Main_admin.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">1200</span>, <span class="number">810</span>)</span><br><span class="line">        MainWindow.setMinimumSize(QtCore.QSize(<span class="number">1200</span>, <span class="number">810</span>))</span><br><span class="line">        MainWindow.setMaximumSize(QtCore.QSize(<span class="number">1200</span>, <span class="number">810</span>))</span><br><span class="line">        icon = QtGui.QIcon()</span><br><span class="line">        icon.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/window_icon.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        MainWindow.setWindowIcon(icon)</span><br><span class="line">        MainWindow.setStyleSheet(<span class="string">"font: 10pt \"微软雅黑\";"</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">"centralwidget"</span>)</span><br><span class="line">        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)</span><br><span class="line">        self.tabWidget.setGeometry(QtCore.QRect(<span class="number">270</span>, <span class="number">80</span>, <span class="number">860</span>, <span class="number">560</span>))</span><br><span class="line">        self.tabWidget.setMinimumSize(QtCore.QSize(<span class="number">860</span>, <span class="number">560</span>))</span><br><span class="line">        self.tabWidget.setMaximumSize(QtCore.QSize(<span class="number">860</span>, <span class="number">560</span>))</span><br><span class="line">        self.tabWidget.setStyleSheet(<span class="string">"QPushButton&#123;border-radius: 10px;border: 2px groove gray;border-style: outset;&#125;\n"</span></span><br><span class="line"><span class="string">"QPushButton:hover&#123;color: #66A3FF;background:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,stop: 0 #fafafa, stop: 0.4 #f4f4f4,stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);&#125;\n"</span></span><br><span class="line"><span class="string">"QPushButton:pressed&#123;color: #E680BD;&#125;\n"</span></span><br><span class="line"><span class="string">"QTabBar::tab:hover&#123;color: #66A3FF;background:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,stop: 0 #fafafa, stop: 0.4 #f4f4f4,stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);&#125;\n"</span></span><br><span class="line"><span class="string">"QTabBar::tab:selected&#123;color: #E680BD;&#125;"</span>)</span><br><span class="line">        self.tabWidget.setDocumentMode(<span class="literal">True</span>)</span><br><span class="line">        self.tabWidget.setObjectName(<span class="string">"tabWidget"</span>)</span><br><span class="line">        self.tab = QtWidgets.QWidget()</span><br><span class="line">        self.tab.setObjectName(<span class="string">"tab"</span>)</span><br><span class="line">        self.confirm_course_admin_button = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.confirm_course_admin_button.setGeometry(QtCore.QRect(<span class="number">740</span>, <span class="number">480</span>, <span class="number">101</span>, <span class="number">28</span>))</span><br><span class="line">        icon1 = QtGui.QIcon()</span><br><span class="line">        icon1.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/确认.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.confirm_course_admin_button.setIcon(icon1)</span><br><span class="line">        self.confirm_course_admin_button.setObjectName(<span class="string">"confirm_course_admin_button"</span>)</span><br><span class="line">        self.admin_setcourse_tableWidget = QtWidgets.QTableWidget(self.tab)</span><br><span class="line">        self.admin_setcourse_tableWidget.setGeometry(QtCore.QRect(<span class="number">110</span>, <span class="number">40</span>, <span class="number">611</span>, <span class="number">391</span>))</span><br><span class="line">        self.admin_setcourse_tableWidget.setObjectName(<span class="string">"admin_setcourse_tableWidget"</span>)</span><br><span class="line">        self.admin_setcourse_tableWidget.setColumnCount(<span class="number">1</span>)</span><br><span class="line">        self.admin_setcourse_tableWidget.setRowCount(<span class="number">0</span>)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        icon2 = QtGui.QIcon()</span><br><span class="line">        icon2.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/选择.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        item.setIcon(icon2)</span><br><span class="line">        self.admin_setcourse_tableWidget.setHorizontalHeaderItem(<span class="number">0</span>, item)</span><br><span class="line">        self.admin_add_button = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.admin_add_button.setGeometry(QtCore.QRect(<span class="number">740</span>, <span class="number">50</span>, <span class="number">101</span>, <span class="number">28</span>))</span><br><span class="line">        icon3 = QtGui.QIcon()</span><br><span class="line">        icon3.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/增加课程.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.admin_add_button.setIcon(icon3)</span><br><span class="line">        self.admin_add_button.setObjectName(<span class="string">"admin_add_button"</span>)</span><br><span class="line">        self.admin_del_button = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.admin_del_button.setGeometry(QtCore.QRect(<span class="number">740</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">28</span>))</span><br><span class="line">        icon4 = QtGui.QIcon()</span><br><span class="line">        icon4.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/减少课程.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.admin_del_button.setIcon(icon4)</span><br><span class="line">        self.admin_del_button.setObjectName(<span class="string">"admin_del_button"</span>)</span><br><span class="line">        self.back_admin_button = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.back_admin_button.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">480</span>, <span class="number">101</span>, <span class="number">28</span>))</span><br><span class="line">        icon5 = QtGui.QIcon()</span><br><span class="line">        icon5.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/exit.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.back_admin_button.setIcon(icon5)</span><br><span class="line">        self.back_admin_button.setObjectName(<span class="string">"back_admin_button"</span>)</span><br><span class="line">        self.admin_reset_button = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.admin_reset_button.setGeometry(QtCore.QRect(<span class="number">740</span>, <span class="number">230</span>, <span class="number">101</span>, <span class="number">28</span>))</span><br><span class="line">        icon6 = QtGui.QIcon()</span><br><span class="line">        icon6.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/重置.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.admin_reset_button.setIcon(icon6)</span><br><span class="line">        self.admin_reset_button.setObjectName(<span class="string">"admin_reset_button"</span>)</span><br><span class="line">        icon7 = QtGui.QIcon()</span><br><span class="line">        icon7.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/设置.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.tabWidget.addTab(self.tab, icon7, <span class="string">""</span>)</span><br><span class="line">        self.tab_2 = QtWidgets.QWidget()</span><br><span class="line">        self.tab_2.setObjectName(<span class="string">"tab_2"</span>)</span><br><span class="line">        self.update_admin_button = QtWidgets.QPushButton(self.tab_2)</span><br><span class="line">        self.update_admin_button.setGeometry(QtCore.QRect(<span class="number">370</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">28</span>))</span><br><span class="line">        icon8 = QtGui.QIcon()</span><br><span class="line">        icon8.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/更新.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.update_admin_button.setIcon(icon8)</span><br><span class="line">        self.update_admin_button.setObjectName(<span class="string">"update_admin_button"</span>)</span><br><span class="line">        self.admin_display_tableWidget = QtWidgets.QTableWidget(self.tab_2)</span><br><span class="line">        self.admin_display_tableWidget.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">110</span>, <span class="number">851</span>, <span class="number">421</span>))</span><br><span class="line">        self.admin_display_tableWidget.setObjectName(<span class="string">"admin_display_tableWidget"</span>)</span><br><span class="line">        self.admin_display_tableWidget.setColumnCount(<span class="number">0</span>)</span><br><span class="line">        self.admin_display_tableWidget.setRowCount(<span class="number">5</span>)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.admin_display_tableWidget.setVerticalHeaderItem(<span class="number">0</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.admin_display_tableWidget.setVerticalHeaderItem(<span class="number">1</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.admin_display_tableWidget.setVerticalHeaderItem(<span class="number">2</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.admin_display_tableWidget.setVerticalHeaderItem(<span class="number">3</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.admin_display_tableWidget.setVerticalHeaderItem(<span class="number">4</span>, item)</span><br><span class="line">        icon9 = QtGui.QIcon()</span><br><span class="line">        icon9.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/统计.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.tabWidget.addTab(self.tab_2, icon9, <span class="string">""</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">        self.label.setGeometry(QtCore.QRect(<span class="number">70</span>, <span class="number">70</span>, <span class="number">201</span>, <span class="number">231</span>))</span><br><span class="line">        self.label.setText(<span class="string">""</span>)</span><br><span class="line">        self.label.setPixmap(QtGui.QPixmap(<span class="string">":/1/icons/管理员.png"</span>))</span><br><span class="line">        self.label.setObjectName(<span class="string">"label"</span>)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.menubar = QtWidgets.QMenuBar(MainWindow)</span><br><span class="line">        self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1200</span>, <span class="number">29</span>))</span><br><span class="line">        self.menubar.setObjectName(<span class="string">"menubar"</span>)</span><br><span class="line">        MainWindow.setMenuBar(self.menubar)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">"statusbar"</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        self.tabWidget.setCurrentIndex(<span class="number">0</span>)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line">        MainWindow.setTabOrder(self.confirm_course_admin_button, self.update_admin_button)</span><br><span class="line">        MainWindow.setTabOrder(self.update_admin_button, self.admin_display_tableWidget)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"教务管理"</span>))</span><br><span class="line">        self.confirm_course_admin_button.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"确认"</span>))</span><br><span class="line">        item = self.admin_setcourse_tableWidget.horizontalHeaderItem(<span class="number">0</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"选择栏"</span>))</span><br><span class="line">        self.admin_add_button.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"增加课程"</span>))</span><br><span class="line">        self.admin_del_button.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"删除课程"</span>))</span><br><span class="line">        self.back_admin_button.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"退出"</span>))</span><br><span class="line">        self.admin_reset_button.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"重置"</span>))</span><br><span class="line">        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate(<span class="string">"MainWindow"</span>, <span class="string">"课程设置"</span>))</span><br><span class="line">        self.update_admin_button.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"更新"</span>))</span><br><span class="line">        item = self.admin_display_tableWidget.verticalHeaderItem(<span class="number">0</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"1班"</span>))</span><br><span class="line">        item = self.admin_display_tableWidget.verticalHeaderItem(<span class="number">1</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"2班"</span>))</span><br><span class="line">        item = self.admin_display_tableWidget.verticalHeaderItem(<span class="number">2</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"3班"</span>))</span><br><span class="line">        item = self.admin_display_tableWidget.verticalHeaderItem(<span class="number">3</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"4班"</span>))</span><br><span class="line">        item = self.admin_display_tableWidget.verticalHeaderItem(<span class="number">4</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"总人数"</span>))</span><br><span class="line">        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate(<span class="string">"MainWindow"</span>, <span class="string">"选课统计"</span>))</span><br><span class="line"><span class="keyword">import</span> icons_rc</span><br></pre></td></tr></table></figure>

<hr>
<p>runmain_admin.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Main_admin <span class="keyword">import</span> Ui_MainWindow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainAdmin</span><span class="params">(QMainWindow, Ui_MainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MainAdmin, self).__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.setStyleSheet(<span class="string">'''QWidget#MainWindow&#123;border-image: url(./images/background.png)&#125;'''</span>)</span><br><span class="line">        <span class="comment"># 信号与槽的绑定</span></span><br><span class="line">        self.confirm_course_admin_button.clicked.connect(self.admin_set_course)</span><br><span class="line">        self.update_admin_button.clicked.connect(self.admin_statistics)</span><br><span class="line">        self.back_admin_button.clicked.connect(self.admin_to_login)</span><br><span class="line">        self.admin_add_button.clicked.connect(self.add_course)</span><br><span class="line">        self.admin_del_button.clicked.connect(self.delete_course)</span><br><span class="line">        self.admin_reset_button.clicked.connect(self.reset_all)</span><br><span class="line"></span><br><span class="line">        db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 选课设置板块的初始化</span></span><br><span class="line">        <span class="comment"># 设置选课设置板块表格行数，即教务可设置几门课程</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">"select *from schedule"</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            info_schedule = cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">27</span>)</span><br><span class="line">        self.admin_setcourse_tableWidget.setRowCount(len(info_schedule))</span><br><span class="line">        <span class="comment"># 设置垂直方向的表头标签</span></span><br><span class="line">        labels = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">            labels.append(<span class="string">"课程"</span>+info_schedule[i][<span class="number">0</span>])</span><br><span class="line">        self.admin_setcourse_tableWidget.setVerticalHeaderLabels(labels)</span><br><span class="line">        <span class="comment"># 设置表格水平方向自适应</span></span><br><span class="line">        self.admin_setcourse_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        <span class="comment"># 为表格添加下拉组合框</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">            combobox = QComboBox()</span><br><span class="line">            <span class="comment"># 为每个下拉组合框预设四个默认可选选项并设置为可编辑,并且设置当前下标为-1</span></span><br><span class="line">            combobox.addItems([<span class="string">'程设'</span>, <span class="string">'马原'</span>, <span class="string">'毛概'</span>, <span class="string">'邓论'</span>])</span><br><span class="line">            combobox.setEditable(<span class="literal">True</span>)</span><br><span class="line">            combobox.setCurrentIndex(<span class="number">-1</span>)</span><br><span class="line">            <span class="comment"># 为每个下拉组合框重新命名</span></span><br><span class="line">            combobox.setObjectName(str(i))</span><br><span class="line">            <span class="comment"># 将每个下拉组合框添加到表格中</span></span><br><span class="line">            self.admin_setcourse_tableWidget.setCellWidget(i, <span class="number">0</span>, combobox)</span><br><span class="line">        <span class="comment"># 如果教务之前已经设置过课程，则登录进教务界面时显示它们</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">            <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                    self.findChild(QComboBox, str(i)).setCurrentText(info_schedule[i][<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化教务选课版信息</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            courses = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                    courses.append(info_schedule[i][<span class="number">-1</span>])</span><br><span class="line">            <span class="comment"># 设置表格列数</span></span><br><span class="line">            self.admin_display_tableWidget.setColumnCount(len(courses))</span><br><span class="line">            <span class="comment"># 设置表格水平表头标签，即教务设置的课程名</span></span><br><span class="line">            self.admin_display_tableWidget.setHorizontalHeaderLabels(courses)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">69</span>)</span><br><span class="line">        <span class="comment"># 禁止table widget的编辑</span></span><br><span class="line">        self.admin_display_tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        <span class="comment"># 水平方向自适应</span></span><br><span class="line">        self.admin_display_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line"></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 教务界面的设置课程模块</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">admin_set_course</span><span class="params">(self)</span>:</span></span><br><span class="line">        db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        <span class="comment"># 当教务按下选课设置页面的确定按钮时，student_account表中的course和class字段内容应该被清空</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">'update student_account set course=null'</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            sql = <span class="string">'update student_account set class=null'</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            db.commit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">87</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">'select *from schedule'</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            info_schedule = cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">94</span>)</span><br><span class="line">        <span class="comment"># 获取当前下拉组合框中的课程名</span></span><br><span class="line">        course_names = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">            course_names.append(self.findChild(QComboBox, str(i)).currentText())</span><br><span class="line">        <span class="comment"># 判断当前下拉组合框中的课程名是否至少有一门课程不为空</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">            <span class="keyword">if</span> course_names[i] != <span class="string">''</span>:</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"至少设置一门课程"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 判断当前下拉组合框中的课程名是否重复</span></span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)<span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(info_schedule)):</span><br><span class="line">                    <span class="keyword">if</span> course_names[i] == course_names[j] <span class="keyword">and</span> course_names[i] != <span class="string">''</span> <span class="keyword">and</span> course_names[j] != <span class="string">''</span>:</span><br><span class="line">                        flag = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">               QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"不能设置两门相同的课程"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 更新表schedule中的course字段内容</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        sql = <span class="string">'update schedule set course=%s where id=%s'</span></span><br><span class="line">                        data = (course_names[i], str(i+<span class="number">1</span>))</span><br><span class="line">                        cursor.execute(sql, data)</span><br><span class="line">                        db.commit()</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        print(<span class="number">102</span>)</span><br><span class="line">                QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"课程设置成功"</span>)</span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 教务界面的选课版模块</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">admin_statistics</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 存储人数</span></span><br><span class="line">        num = []</span><br><span class="line">        total_num = []</span><br><span class="line">        db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新设置后,点击更新按钮，统计版的标题头应该被刷新</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">"select *from schedule"</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            info_schedule = cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">154</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            courses = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                    courses.append(info_schedule[i][<span class="number">-1</span>])</span><br><span class="line">            <span class="comment"># 设置表格列数</span></span><br><span class="line">            self.admin_display_tableWidget.setColumnCount(len(courses))</span><br><span class="line">            <span class="comment"># 设置表格水平表头标签，即教务设置的课程名</span></span><br><span class="line">            self.admin_display_tableWidget.setHorizontalHeaderLabels(courses)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">165</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用i遍历不同的班</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sql = <span class="string">"select *from student_account where class=%s"</span></span><br><span class="line">                cursor.execute(sql, str(i+<span class="number">1</span>)+<span class="string">'班'</span>)</span><br><span class="line">                info = cursor.fetchall()</span><br><span class="line">                <span class="keyword">if</span> info <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 创建一个列表counts,存储该班每门课对应人数</span></span><br><span class="line">                    counts = []</span><br><span class="line">                    <span class="comment"># 为每门课初始人数赋值为0</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                        counts.append(<span class="number">0</span>)</span><br><span class="line">                    <span class="comment"># 用j遍历同班中每个人的course字段内容</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(info)):</span><br><span class="line">                        <span class="comment"># 用k遍历courses列表中的课，即教务预设的课</span></span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                            <span class="comment"># 使用正则表达式检索course字段中的内容，发现这门课在该字符串中，则这门课的人数加一</span></span><br><span class="line">                            <span class="keyword">if</span> re.search(courses[k], info[j][<span class="number">-1</span>]) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                                counts[k] = counts[k] + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                        num.append(counts[k])</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="number">189</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 统计各课程总人数</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">            <span class="comment"># count用于存储每个课程的总人数</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">                count = count + num[row*len(courses)+col]</span><br><span class="line">            total_num.append(count)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将统计好的各班各课程人数显示在选课版的表格上</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                <span class="keyword">if</span> row == <span class="number">4</span>:</span><br><span class="line">                    item = QTableWidgetItem(str(total_num[col]))</span><br><span class="line">                    self.admin_display_tableWidget.setItem(row, col, item)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    item = QTableWidgetItem(str(num[len(courses)*row+col]))</span><br><span class="line">                    self.admin_display_tableWidget.setItem(row, col, item)</span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 教务界面增加课程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_course</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 在教务添加课程之前提示"请先保存未确认的课程，再添加课程"</span></span><br><span class="line">        reply = QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"请先保存未确认的课程，再添加课程"</span>, QMessageBox.Ok | QMessageBox.Abort,</span><br><span class="line">                                        QMessageBox.Abort)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Ok:</span><br><span class="line">            db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">            cursor = db.cursor()</span><br><span class="line">            <span class="comment"># 当教务按下增加课程按钮并选择Ok时，student_account表中的course和class字段内容应该被清空</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sql = <span class="string">'update student_account set course=null'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                sql = <span class="string">'update student_account set class=null'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="number">227</span>)</span><br><span class="line">            <span class="comment"># 获取添加课程之前已经有多少门课程</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sql = <span class="string">'select *from schedule'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                info_schedule = cursor.fetchall()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="number">241</span>)</span><br><span class="line">            <span class="comment"># 如果课程小于9门则可以继续添加,否则提示不能再添加更多课程</span></span><br><span class="line">            <span class="keyword">if</span> len(info_schedule) &lt; <span class="number">9</span>:</span><br><span class="line">                <span class="comment"># 往表schedule插入一条记录</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sql = <span class="string">'insert into schedule(id, course) values(%s, %s)'</span></span><br><span class="line">                    data = (str(len(info_schedule)+<span class="number">1</span>), <span class="string">''</span>)</span><br><span class="line">                    cursor.execute(sql, data)</span><br><span class="line">                    db.commit()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="number">249</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 刷新教务界面设置课程的表格</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sql = <span class="string">"select *from schedule"</span></span><br><span class="line">                    cursor.execute(sql)</span><br><span class="line">                    info_schedule = cursor.fetchall()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="number">259</span>)</span><br><span class="line">                self.admin_setcourse_tableWidget.setRowCount(len(info_schedule))</span><br><span class="line">                <span class="comment"># 设置垂直方向的表头标签</span></span><br><span class="line">                labels = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                    labels.append(<span class="string">"课程"</span>+info_schedule[i][<span class="number">0</span>])</span><br><span class="line">                self.admin_setcourse_tableWidget.setVerticalHeaderLabels(labels)</span><br><span class="line">                <span class="comment"># 设置表格水平方向自适应</span></span><br><span class="line">                self.admin_setcourse_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">                <span class="comment"># 为表格添加下拉组合框</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                    combobox = QComboBox()</span><br><span class="line">                    <span class="comment"># 为每个下拉组合框预设四个默认可选选项并设置为可编辑,并且设置当前下标为-1</span></span><br><span class="line">                    combobox.addItems([<span class="string">'程设'</span>, <span class="string">'马原'</span>, <span class="string">'毛概'</span>, <span class="string">'邓论'</span>])</span><br><span class="line">                    combobox.setEditable(<span class="literal">True</span>)</span><br><span class="line">                    combobox.setCurrentIndex(<span class="number">-1</span>)</span><br><span class="line">                    <span class="comment"># 为每个下拉组合框重新命名</span></span><br><span class="line">                    combobox.setObjectName(str(i))</span><br><span class="line">                    <span class="comment"># 将每个下拉组合框添加到表格中</span></span><br><span class="line">                    self.admin_setcourse_tableWidget.setCellWidget(i, <span class="number">0</span>, combobox)</span><br><span class="line">                <span class="comment"># 如果教务之前已经设置过课程，则登录进教务界面时显示它们</span></span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                    <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                        flag = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                        <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                            self.findChild(QComboBox, str(i)).setCurrentText(info_schedule[i][<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"添加课程已到上限"</span>)</span><br><span class="line"></span><br><span class="line">            cursor.close()</span><br><span class="line">            db.close()</span><br><span class="line">    <span class="comment"># 教务界面删除课程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_course</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 在教务添加课程之前提示"请先保存未确认的课程，再添加课程"</span></span><br><span class="line">        reply = QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"请先保存未确认的课程，再删除课程"</span>, QMessageBox.Ok | QMessageBox.Abort,</span><br><span class="line">                                        QMessageBox.Abort)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Ok:</span><br><span class="line">            db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">            cursor = db.cursor()</span><br><span class="line">            <span class="comment"># 当教务按下删除课程按钮并选择Ok时，student_account表中的course和class字段内容应该被清空</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sql = <span class="string">'update student_account set course=null'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                sql = <span class="string">'update student_account set class=null'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="number">304</span>)</span><br><span class="line">            <span class="comment"># 获取添加课程之前已经有多少门课程</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sql = <span class="string">'select *from schedule'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                info_schedule = cursor.fetchall()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="number">264</span>)</span><br><span class="line">            <span class="comment"># 如果之前的课程大于四门则可以删除，否则提示不能再继续删除</span></span><br><span class="line">            <span class="keyword">if</span> len(info_schedule) &gt; <span class="number">4</span>:</span><br><span class="line">                <span class="comment"># 在表schedule中删除最后一条记录</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sql = <span class="string">'delete from schedule where id=%s'</span></span><br><span class="line">                    cursor.execute(sql, len(info_schedule))</span><br><span class="line">                    db.commit()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="number">273</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 刷新教务界面设置课程的表格</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sql = <span class="string">"select *from schedule"</span></span><br><span class="line">                    cursor.execute(sql)</span><br><span class="line">                    info_schedule = cursor.fetchall()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="number">320</span>)</span><br><span class="line">                self.admin_setcourse_tableWidget.setRowCount(len(info_schedule))</span><br><span class="line">                <span class="comment"># 设置垂直方向的表头标签</span></span><br><span class="line">                labels = []</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                    labels.append(<span class="string">"课程"</span> + info_schedule[i][<span class="number">0</span>])</span><br><span class="line">                self.admin_setcourse_tableWidget.setVerticalHeaderLabels(labels)</span><br><span class="line">                <span class="comment"># 设置表格水平方向自适应</span></span><br><span class="line">                self.admin_setcourse_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">                <span class="comment"># 为表格添加下拉组合框</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                    combobox = QComboBox()</span><br><span class="line">                    <span class="comment"># 为每个下拉组合框预设四个默认可选选项并设置为可编辑,并且设置当前下标为-1</span></span><br><span class="line">                    combobox.addItems([<span class="string">'程设'</span>, <span class="string">'马原'</span>, <span class="string">'毛概'</span>, <span class="string">'邓论'</span>])</span><br><span class="line">                    combobox.setEditable(<span class="literal">True</span>)</span><br><span class="line">                    combobox.setCurrentIndex(<span class="number">-1</span>)</span><br><span class="line">                    <span class="comment"># 为每个下拉组合框重新命名</span></span><br><span class="line">                    combobox.setObjectName(str(i))</span><br><span class="line">                    <span class="comment"># 将每个下拉组合框添加到表格中</span></span><br><span class="line">                    self.admin_setcourse_tableWidget.setCellWidget(i, <span class="number">0</span>, combobox)</span><br><span class="line">                <span class="comment"># 如果教务之前已经设置过课程，则登录进教务界面时显示它们</span></span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                    <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                        flag = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                        <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                            self.findChild(QComboBox, str(i)).setCurrentText(info_schedule[i][<span class="number">-1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"不能再继续删除课程"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 教务界面重置按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_all</span><span class="params">(self)</span>:</span></span><br><span class="line">        reply = QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"将重置整个选课系统为初始状态!"</span>, QMessageBox.Yes | QMessageBox.No</span><br><span class="line">                                        , QMessageBox.No)</span><br><span class="line">        <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">            db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">            cursor = db.cursor()</span><br><span class="line">            <span class="comment"># 清空表schedule的course字段，并删除id大于4的记录</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sql = <span class="string">'select *from schedule'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                info_schedule = cursor.fetchall()</span><br><span class="line">                <span class="keyword">if</span> len(info_schedule) &gt; <span class="number">4</span>:</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>, len(info_schedule)+<span class="number">1</span>):</span><br><span class="line">                        sql = <span class="string">'delete from schedule where id=%s'</span></span><br><span class="line">                        cursor.execute(sql, str(i))</span><br><span class="line">                        db.commit()</span><br><span class="line">                sql = <span class="string">'update schedule set course=%s'</span></span><br><span class="line">                cursor.execute(sql, <span class="string">''</span>)</span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="number">385</span>)</span><br><span class="line">            <span class="comment"># 清空表student_account中的class和course字段</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sql = <span class="string">'update student_account set class = null'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                sql = <span class="string">'update student_account set course = null'</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="number">399</span>)</span><br><span class="line">        <span class="comment"># 设置教务设置课程界面为初始状态</span></span><br><span class="line">        <span class="comment"># 选课设置板块的初始化</span></span><br><span class="line">        <span class="comment"># 设置选课设置板块表格行数，即教务可设置几门课程</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">"select *from schedule"</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            info_schedule = cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">27</span>)</span><br><span class="line">        self.admin_setcourse_tableWidget.setRowCount(len(info_schedule))</span><br><span class="line">        <span class="comment"># 设置垂直方向的表头标签</span></span><br><span class="line">        labels = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">            labels.append(<span class="string">"课程"</span> + info_schedule[i][<span class="number">0</span>])</span><br><span class="line">        self.admin_setcourse_tableWidget.setVerticalHeaderLabels(labels)</span><br><span class="line">        <span class="comment"># 设置表格水平方向自适应</span></span><br><span class="line">        self.admin_setcourse_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        <span class="comment"># 为表格添加下拉组合框</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">            combobox = QComboBox()</span><br><span class="line">            <span class="comment"># 为每个下拉组合框预设四个默认可选选项并设置为可编辑,并且设置当前下标为-1</span></span><br><span class="line">            combobox.addItems([<span class="string">'程设'</span>, <span class="string">'马原'</span>, <span class="string">'毛概'</span>, <span class="string">'邓论'</span>])</span><br><span class="line">            combobox.setEditable(<span class="literal">True</span>)</span><br><span class="line">            combobox.setCurrentIndex(<span class="number">-1</span>)</span><br><span class="line">            <span class="comment"># 为每个下拉组合框重新命名</span></span><br><span class="line">            combobox.setObjectName(str(i))</span><br><span class="line">            <span class="comment"># 将每个下拉组合框添加到表格中</span></span><br><span class="line">            self.admin_setcourse_tableWidget.setCellWidget(i, <span class="number">0</span>, combobox)</span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 教务界面返回登录界面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">admin_to_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> runlogin <span class="keyword">import</span> Login</span><br><span class="line">        self.close()</span><br><span class="line">        self.login = Login()</span><br><span class="line">        self.login.show()</span><br></pre></td></tr></table></figure>

<hr>
<p>Main_student.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        MainWindow.setWindowModality(QtCore.Qt.ApplicationModal)</span><br><span class="line">        MainWindow.resize(<span class="number">1200</span>, <span class="number">810</span>)</span><br><span class="line">        MainWindow.setMinimumSize(QtCore.QSize(<span class="number">1200</span>, <span class="number">810</span>))</span><br><span class="line">        MainWindow.setMaximumSize(QtCore.QSize(<span class="number">1200</span>, <span class="number">810</span>))</span><br><span class="line">        icon = QtGui.QIcon()</span><br><span class="line">        icon.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/window_icon.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        MainWindow.setWindowIcon(icon)</span><br><span class="line">        MainWindow.setStyleSheet(<span class="string">"font: 10pt \"微软雅黑\";"</span>)</span><br><span class="line">        MainWindow.setUnifiedTitleAndToolBarOnMac(<span class="literal">False</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">"centralwidget"</span>)</span><br><span class="line">        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)</span><br><span class="line">        self.tabWidget.setGeometry(QtCore.QRect(<span class="number">270</span>, <span class="number">80</span>, <span class="number">860</span>, <span class="number">560</span>))</span><br><span class="line">        self.tabWidget.setMinimumSize(QtCore.QSize(<span class="number">860</span>, <span class="number">560</span>))</span><br><span class="line">        self.tabWidget.setMaximumSize(QtCore.QSize(<span class="number">860</span>, <span class="number">560</span>))</span><br><span class="line">        self.tabWidget.setStyleSheet(<span class="string">"QPushButton&#123;border-radius: 10px;border: 2px groove gray;border-style: outset;&#125;\n"</span></span><br><span class="line"><span class="string">"QPushButton:hover&#123;color: #66A3FF;background:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,stop: 0 #fafafa, stop: 0.4 #f4f4f4,stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);&#125;\n"</span></span><br><span class="line"><span class="string">"QPushButton:pressed&#123;color: #E680BD;&#125;\n"</span></span><br><span class="line"><span class="string">"QTabBar::tab:hover&#123;color: #66A3FF;background:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,stop: 0 #fafafa, stop: 0.4 #f4f4f4,stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);&#125;\n"</span></span><br><span class="line"><span class="string">"QTabBar::tab:selected&#123;color: #E680BD;&#125;\n"</span></span><br><span class="line"><span class="string">"QComboBox&#123;border:2px solid&#125;\n"</span></span><br><span class="line"><span class="string">"QComboBox::hover&#123; border:2px solid #E680BD;color: #66A3FF;&#125;\n"</span></span><br><span class="line"><span class="string">"QComboBox::pressed&#123;color: #ca1028;&#125;\n"</span></span><br><span class="line"><span class="string">""</span>)</span><br><span class="line">        self.tabWidget.setDocumentMode(<span class="literal">True</span>)</span><br><span class="line">        self.tabWidget.setObjectName(<span class="string">"tabWidget"</span>)</span><br><span class="line">        self.tab = QtWidgets.QWidget()</span><br><span class="line">        self.tab.setObjectName(<span class="string">"tab"</span>)</span><br><span class="line">        self.student_update_button = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.student_update_button.setGeometry(QtCore.QRect(<span class="number">750</span>, <span class="number">470</span>, <span class="number">101</span>, <span class="number">31</span>))</span><br><span class="line">        icon1 = QtGui.QIcon()</span><br><span class="line">        icon1.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/确认.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.student_update_button.setIcon(icon1)</span><br><span class="line">        self.student_update_button.setObjectName(<span class="string">"student_update_button"</span>)</span><br><span class="line">        self.student_back = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.student_back.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">470</span>, <span class="number">101</span>, <span class="number">31</span>))</span><br><span class="line">        icon2 = QtGui.QIcon()</span><br><span class="line">        icon2.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/exit.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.student_back.setIcon(icon2)</span><br><span class="line">        self.student_back.setObjectName(<span class="string">"student_back"</span>)</span><br><span class="line">        self.student_setcourse_tableWidget = QtWidgets.QTableWidget(self.tab)</span><br><span class="line">        self.student_setcourse_tableWidget.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">60</span>, <span class="number">851</span>, <span class="number">381</span>))</span><br><span class="line">        self.student_setcourse_tableWidget.setStyleSheet(<span class="string">""</span>)</span><br><span class="line">        self.student_setcourse_tableWidget.setObjectName(<span class="string">"student_setcourse_tableWidget"</span>)</span><br><span class="line">        self.student_setcourse_tableWidget.setColumnCount(<span class="number">2</span>)</span><br><span class="line">        self.student_setcourse_tableWidget.setRowCount(<span class="number">0</span>)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        icon3 = QtGui.QIcon()</span><br><span class="line">        icon3.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/选择.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        item.setIcon(icon3)</span><br><span class="line">        self.student_setcourse_tableWidget.setHorizontalHeaderItem(<span class="number">0</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        icon4 = QtGui.QIcon()</span><br><span class="line">        icon4.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/课程.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        item.setIcon(icon4)</span><br><span class="line">        self.student_setcourse_tableWidget.setHorizontalHeaderItem(<span class="number">1</span>, item)</span><br><span class="line">        self.layoutWidget = QtWidgets.QWidget(self.tab)</span><br><span class="line">        self.layoutWidget.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">20</span>, <span class="number">161</span>, <span class="number">31</span>))</span><br><span class="line">        self.layoutWidget.setObjectName(<span class="string">"layoutWidget"</span>)</span><br><span class="line">        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget)</span><br><span class="line">        self.horizontalLayout_2.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.horizontalLayout_2.setObjectName(<span class="string">"horizontalLayout_2"</span>)</span><br><span class="line">        self.stu_set_class_label = QtWidgets.QLabel(self.layoutWidget)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.stu_set_class_label.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.stu_set_class_label.setSizePolicy(sizePolicy)</span><br><span class="line">        self.stu_set_class_label.setObjectName(<span class="string">"stu_set_class_label"</span>)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.stu_set_class_label)</span><br><span class="line">        self.stu_set_class_comboBox = QtWidgets.QComboBox(self.layoutWidget)</span><br><span class="line">        self.stu_set_class_comboBox.setObjectName(<span class="string">"stu_set_class_comboBox"</span>)</span><br><span class="line">        self.stu_set_class_comboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.stu_set_class_comboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.stu_set_class_comboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.stu_set_class_comboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.stu_set_class_comboBox)</span><br><span class="line">        icon5 = QtGui.QIcon()</span><br><span class="line">        icon5.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/select_lesson.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.tabWidget.addTab(self.tab, icon5, <span class="string">""</span>)</span><br><span class="line">        self.tab_2 = QtWidgets.QWidget()</span><br><span class="line">        self.tab_2.setObjectName(<span class="string">"tab_2"</span>)</span><br><span class="line">        self.update_information = QtWidgets.QPushButton(self.tab_2)</span><br><span class="line">        self.update_information.setGeometry(QtCore.QRect(<span class="number">720</span>, <span class="number">30</span>, <span class="number">93</span>, <span class="number">28</span>))</span><br><span class="line">        icon6 = QtGui.QIcon()</span><br><span class="line">        icon6.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/更新.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.update_information.setIcon(icon6)</span><br><span class="line">        self.update_information.setObjectName(<span class="string">"update_information"</span>)</span><br><span class="line">        self.student_display_tableWidget = QtWidgets.QTableWidget(self.tab_2)</span><br><span class="line">        self.student_display_tableWidget.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">80</span>, <span class="number">851</span>, <span class="number">451</span>))</span><br><span class="line">        self.student_display_tableWidget.setObjectName(<span class="string">"student_display_tableWidget"</span>)</span><br><span class="line">        self.student_display_tableWidget.setColumnCount(<span class="number">1</span>)</span><br><span class="line">        self.student_display_tableWidget.setRowCount(<span class="number">5</span>)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.student_display_tableWidget.setVerticalHeaderItem(<span class="number">0</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.student_display_tableWidget.setVerticalHeaderItem(<span class="number">1</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.student_display_tableWidget.setVerticalHeaderItem(<span class="number">2</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.student_display_tableWidget.setVerticalHeaderItem(<span class="number">3</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.student_display_tableWidget.setVerticalHeaderItem(<span class="number">4</span>, item)</span><br><span class="line">        item = QtWidgets.QTableWidgetItem()</span><br><span class="line">        self.student_display_tableWidget.setHorizontalHeaderItem(<span class="number">0</span>, item)</span><br><span class="line">        icon7 = QtGui.QIcon()</span><br><span class="line">        icon7.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/统计.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.tabWidget.addTab(self.tab_2, icon7, <span class="string">""</span>)</span><br><span class="line">        self.tab_3 = QtWidgets.QWidget()</span><br><span class="line">        self.tab_3.setObjectName(<span class="string">"tab_3"</span>)</span><br><span class="line">        self.student_find_button = QtWidgets.QPushButton(self.tab_3)</span><br><span class="line">        self.student_find_button.setGeometry(QtCore.QRect(<span class="number">370</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">31</span>))</span><br><span class="line">        icon8 = QtGui.QIcon()</span><br><span class="line">        icon8.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/查询.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.student_find_button.setIcon(icon8)</span><br><span class="line">        self.student_find_button.setObjectName(<span class="string">"student_find_button"</span>)</span><br><span class="line">        self.display_student_information = QtWidgets.QTextBrowser(self.tab_3)</span><br><span class="line">        self.display_student_information.setGeometry(QtCore.QRect(<span class="number">270</span>, <span class="number">170</span>, <span class="number">291</span>, <span class="number">241</span>))</span><br><span class="line">        self.display_student_information.setObjectName(<span class="string">"display_student_information"</span>)</span><br><span class="line">        self.tabWidget.addTab(self.tab_3, icon8, <span class="string">""</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">        self.label.setGeometry(QtCore.QRect(<span class="number">70</span>, <span class="number">70</span>, <span class="number">201</span>, <span class="number">231</span>))</span><br><span class="line">        self.label.setText(<span class="string">""</span>)</span><br><span class="line">        self.label.setPixmap(QtGui.QPixmap(<span class="string">":/1/icons/学生.png"</span>))</span><br><span class="line">        self.label.setObjectName(<span class="string">"label"</span>)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.menubar = QtWidgets.QMenuBar(MainWindow)</span><br><span class="line">        self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1200</span>, <span class="number">29</span>))</span><br><span class="line">        self.menubar.setObjectName(<span class="string">"menubar"</span>)</span><br><span class="line">        MainWindow.setMenuBar(self.menubar)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">"statusbar"</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        self.tabWidget.setCurrentIndex(<span class="number">0</span>)</span><br><span class="line">        self.stu_set_class_comboBox.setCurrentIndex(<span class="number">-1</span>)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line">        MainWindow.setTabOrder(self.student_update_button, self.student_back)</span><br><span class="line">        MainWindow.setTabOrder(self.student_back, self.update_information)</span><br><span class="line">        MainWindow.setTabOrder(self.update_information, self.student_find_button)</span><br><span class="line">        MainWindow.setTabOrder(self.student_find_button, self.student_display_tableWidget)</span><br><span class="line">        MainWindow.setTabOrder(self.student_display_tableWidget, self.display_student_information)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"学生选课系统"</span>))</span><br><span class="line">        self.student_update_button.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"确认"</span>))</span><br><span class="line">        self.student_back.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"退出"</span>))</span><br><span class="line">        item = self.student_setcourse_tableWidget.horizontalHeaderItem(<span class="number">0</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"选择"</span>))</span><br><span class="line">        item = self.student_setcourse_tableWidget.horizontalHeaderItem(<span class="number">1</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"课程"</span>))</span><br><span class="line">        self.stu_set_class_label.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"班级:"</span>))</span><br><span class="line">        self.stu_set_class_comboBox.setItemText(<span class="number">0</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"1班"</span>))</span><br><span class="line">        self.stu_set_class_comboBox.setItemText(<span class="number">1</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"2班"</span>))</span><br><span class="line">        self.stu_set_class_comboBox.setItemText(<span class="number">2</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"3班"</span>))</span><br><span class="line">        self.stu_set_class_comboBox.setItemText(<span class="number">3</span>, _translate(<span class="string">"MainWindow"</span>, <span class="string">"4班"</span>))</span><br><span class="line">        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate(<span class="string">"MainWindow"</span>, <span class="string">"学生选课"</span>))</span><br><span class="line">        self.update_information.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"更新"</span>))</span><br><span class="line">        item = self.student_display_tableWidget.verticalHeaderItem(<span class="number">0</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"1班"</span>))</span><br><span class="line">        item = self.student_display_tableWidget.verticalHeaderItem(<span class="number">1</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"2班"</span>))</span><br><span class="line">        item = self.student_display_tableWidget.verticalHeaderItem(<span class="number">2</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"3班"</span>))</span><br><span class="line">        item = self.student_display_tableWidget.verticalHeaderItem(<span class="number">3</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"4班"</span>))</span><br><span class="line">        item = self.student_display_tableWidget.verticalHeaderItem(<span class="number">4</span>)</span><br><span class="line">        item.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"总人数"</span>))</span><br><span class="line">        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate(<span class="string">"MainWindow"</span>, <span class="string">"选课统计"</span>))</span><br><span class="line">        self.student_find_button.setText(_translate(<span class="string">"MainWindow"</span>, <span class="string">"查询"</span>))</span><br><span class="line">        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate(<span class="string">"MainWindow"</span>, <span class="string">"选课查询"</span>))</span><br><span class="line"><span class="keyword">import</span> icons_rc</span><br><span class="line"><span class="keyword">import</span> images_rc</span><br></pre></td></tr></table></figure>

<hr>
<p>runmain_student.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> Main_student <span class="keyword">import</span> Ui_MainWindow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span><span class="params">(QMainWindow, Ui_MainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Main, self).__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.setStyleSheet(<span class="string">'''#MainWindow&#123;border-image: url(./images/background.png)&#125;'''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 自定义槽与clicked信号</span></span><br><span class="line">        self.student_update_button.clicked.connect(self.succeed_choose_course) <span class="comment"># 确认选课按钮</span></span><br><span class="line">        self.student_back.clicked.connect(self.main_student_to_login) <span class="comment"># 返回按钮</span></span><br><span class="line">        self.update_information.clicked.connect(self.statistics_course_student) <span class="comment"># 更新选课版信息</span></span><br><span class="line">        self.student_find_button.clicked.connect(self.display_information) <span class="comment">#查询按钮</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化学生选课表格</span></span><br><span class="line">        db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        <span class="comment"># 获取教务预设的课程</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">"select *from schedule"</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            info_schedule = cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">33</span>)</span><br><span class="line">        <span class="comment"># 创建一个列表courses，存放教务预设的课程</span></span><br><span class="line">        courses = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">            <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                courses.append(info_schedule[i][<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># 设置学生选课表格的行数</span></span><br><span class="line">        self.student_setcourse_tableWidget.setRowCount(len(courses))</span><br><span class="line">        <span class="comment"># 设置学生选课表格垂直表头标签</span></span><br><span class="line">        labels = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">            labels.append(str(i+<span class="number">1</span>))</span><br><span class="line">        self.student_setcourse_tableWidget.setVerticalHeaderLabels(labels)</span><br><span class="line">        <span class="comment"># 设置表格水平方向自适应</span></span><br><span class="line">        self.student_setcourse_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        <span class="comment"># 为学生选课表格的每一行的第一列创建复选框checkbox</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">            checkbox = QCheckBox()</span><br><span class="line">            <span class="comment"># 设置复选框初始状态为未选中</span></span><br><span class="line">            checkbox.setChecked(<span class="literal">False</span>)</span><br><span class="line">            <span class="comment"># 为复选框重新命名</span></span><br><span class="line">            checkbox.setObjectName(str(i))</span><br><span class="line">            <span class="comment"># 将复选框添加到学生选课表格中</span></span><br><span class="line">            self.student_setcourse_tableWidget.setCellWidget(i, <span class="number">0</span>, checkbox)</span><br><span class="line">        <span class="comment"># 为学生选课表格每一行的第二列初始化教务设置的课程</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">            item = QTableWidgetItem(courses[i])</span><br><span class="line">            self.student_setcourse_tableWidget.setItem(i, <span class="number">1</span>, item)</span><br><span class="line">        <span class="comment"># 将学生选课表格设置为禁止编辑</span></span><br><span class="line">        self.student_setcourse_tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化学生选课版表格信息</span></span><br><span class="line">        <span class="comment"># 设置水平标题栏和列数</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.student_display_tableWidget.setColumnCount(len(courses))</span><br><span class="line">            self.student_display_tableWidget.setHorizontalHeaderLabels(courses)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">67</span>)</span><br><span class="line">        <span class="comment"># 将表格设置为禁止编辑</span></span><br><span class="line">        self.student_display_tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        <span class="comment"># 水平方向自适应</span></span><br><span class="line">        self.student_display_tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line"></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学生选课成功，将学生信息录入模块</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">succeed_choose_course</span><span class="params">(self)</span>:</span></span><br><span class="line">        db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        <span class="comment"># 获取教务预设的课程</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">"select *from schedule"</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            info_schedule = cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">86</span>)</span><br><span class="line">        <span class="comment"># 创建一个列表courses，存放教务预设的课程</span></span><br><span class="line">        courses = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">            <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                courses.append(info_schedule[i][<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># 若没有选择班级，则提示"请先选择班级"</span></span><br><span class="line">        <span class="keyword">if</span> self.stu_set_class_comboBox.currentText() == <span class="string">''</span>:</span><br><span class="line">            QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"请先选择班级"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 若所有复选框都没被选择，则提示"请至少选择一门课程"</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                <span class="keyword">if</span> self.findChild(QCheckBox, str(i)).isChecked() == <span class="literal">True</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"请至少选择一门课程"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 将学生选择的班级和课程录入表student_account的中的class字段和course字段中</span></span><br><span class="line">                <span class="comment"># 查找当前账户</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sql = <span class="string">'select *from now_account'</span></span><br><span class="line">                    cursor.execute(sql)</span><br><span class="line">                    user = cursor.fetchone()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="number">112</span>)</span><br><span class="line">                <span class="comment"># 录入学生班级</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sql = <span class="string">'update student_account set class=%s where account=%s'</span></span><br><span class="line">                    data = (self.stu_set_class_comboBox.currentText(), user[<span class="number">0</span>])</span><br><span class="line">                    cursor.execute(sql, data)</span><br><span class="line">                    db.commit()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="number">118</span>)</span><br><span class="line">                <span class="comment"># 录入学生选择的课程</span></span><br><span class="line">                <span class="comment"># 创建一个空字符串stu_courses存储这个学生选择的所有课程</span></span><br><span class="line">                stu_courses = <span class="string">""</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                    <span class="keyword">if</span> self.findChild(QCheckBox, str(i)).isChecked() == <span class="literal">True</span>:</span><br><span class="line">                        stu_courses = stu_courses + courses[i] + <span class="string">';'</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    sql = <span class="string">'update student_account set course=%s where account=%s'</span></span><br><span class="line">                    data = (stu_courses, user[<span class="number">0</span>])</span><br><span class="line">                    cursor.execute(sql, data)</span><br><span class="line">                    db.commit()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="number">133</span>)</span><br><span class="line">                <span class="comment"># 提示选课成功</span></span><br><span class="line">                QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"选课成功"</span>)</span><br><span class="line"></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学生界面选课版,点击刷新按钮，统计选课情况</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">statistics_course_student</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 存储人数</span></span><br><span class="line">        num = []</span><br><span class="line">        total_num = []</span><br><span class="line">        db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新设置后,点击更新按钮，统计版的标题头应该被刷新</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">"select *from schedule"</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            info_schedule = cursor.fetchall()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">112</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            courses = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(info_schedule)):</span><br><span class="line">                <span class="keyword">if</span> info_schedule[i][<span class="number">-1</span>] != <span class="string">''</span>:</span><br><span class="line">                    courses.append(info_schedule[i][<span class="number">-1</span>])</span><br><span class="line">            <span class="comment"># 设置表格列数</span></span><br><span class="line">            self.student_display_tableWidget.setColumnCount(len(courses))</span><br><span class="line">            <span class="comment"># 设置表格水平表头标签，即教务设置的课程名</span></span><br><span class="line">            self.student_display_tableWidget.setHorizontalHeaderLabels(courses)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">132</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用i遍历不同的班</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sql = <span class="string">"select *from student_account where class=%s"</span></span><br><span class="line">                cursor.execute(sql, str(i + <span class="number">1</span>) + <span class="string">'班'</span>)</span><br><span class="line">                info = cursor.fetchall()</span><br><span class="line">                <span class="keyword">if</span> info <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 创建一个列表counts,存储该班每门课对应人数</span></span><br><span class="line">                    counts = []</span><br><span class="line">                    <span class="comment"># 为每门课初始人数赋值为0</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                        counts.append(<span class="number">0</span>)</span><br><span class="line">                    <span class="comment"># 用j遍历同班中每个人的course字段内容</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(info)):</span><br><span class="line">                        <span class="comment"># 用k遍历courses列表中的课，即教务预设的课</span></span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                            <span class="comment"># 使用正则表达式检索course字段中的内容，发现这门课在该字符串中，则这门课的人数加一</span></span><br><span class="line">                            <span class="keyword">if</span> re.search(courses[k], info[j][<span class="number">-1</span>]) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                                counts[k] = counts[k] + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                        num.append(counts[k])</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="number">192</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 统计各课程总人数</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">            <span class="comment"># count用于存储每个课程的总人数</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">                count = count + num[row * len(courses) + col]</span><br><span class="line">            total_num.append(count)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将统计好的各班各课程人数显示在选课版的表格上</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">0</span>, len(courses)):</span><br><span class="line">                <span class="keyword">if</span> row == <span class="number">4</span>:</span><br><span class="line">                    item = QTableWidgetItem(str(total_num[col]))</span><br><span class="line">                    self.student_display_tableWidget.setItem(row, col, item)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    item = QTableWidgetItem(str(num[len(courses) * row + col]))</span><br><span class="line">                    self.student_display_tableWidget.setItem(row, col, item)</span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学生查询模块</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display_information</span><span class="params">(self)</span>:</span></span><br><span class="line">        db = pymysql.connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'******'</span>, <span class="string">'management_system'</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每次点击查询按钮都要清空之前的内容</span></span><br><span class="line">        self.display_student_information.clear()</span><br><span class="line">        <span class="comment"># 获取当前操作账户</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">"select *from now_account"</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            user = cursor.fetchone()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">250</span>)</span><br><span class="line">        <span class="comment"># 获取该账户所有信息</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sql = <span class="string">"select *from student_account where account = %s"</span></span><br><span class="line">            cursor.execute(sql, user[<span class="number">0</span>])</span><br><span class="line">            info_user = cursor.fetchone()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="number">257</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示所选班级</span></span><br><span class="line">        <span class="keyword">if</span> info_user[<span class="number">2</span>] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.display_student_information.append(<span class="string">"班级:未选"</span>)</span><br><span class="line">            self.display_student_information.ensureCursorVisible()</span><br><span class="line">            self.display_student_information.append(<span class="string">" "</span>)</span><br><span class="line">            self.display_student_information.ensureCursorVisible()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.display_student_information.append(<span class="string">"班级:"</span> + info_user[<span class="number">2</span>])</span><br><span class="line">            self.display_student_information.ensureCursorVisible()</span><br><span class="line">            self.display_student_information.append(<span class="string">" "</span>)</span><br><span class="line">            self.display_student_information.ensureCursorVisible()</span><br><span class="line">        <span class="comment"># 显示所选课程</span></span><br><span class="line">        <span class="keyword">if</span> info_user[<span class="number">-1</span>] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.display_student_information.append(<span class="string">"未选一门课程"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.display_student_information.append(<span class="string">"已选课程:"</span>)</span><br><span class="line">            self.display_student_information.ensureCursorVisible()</span><br><span class="line">            self.display_student_information.append(info_user[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cursor.close()</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学生选课界面返回按钮,跳转回登录界面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main_student_to_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> runlogin <span class="keyword">import</span> Login</span><br><span class="line"></span><br><span class="line">        self.close()</span><br><span class="line">        self.login = Login()</span><br><span class="line">        self.login.show()</span><br></pre></td></tr></table></figure>

<hr>
<p>register.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_Dialog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, Dialog)</span>:</span></span><br><span class="line">        Dialog.setObjectName(<span class="string">"Dialog"</span>)</span><br><span class="line">        Dialog.resize(<span class="number">1050</span>, <span class="number">750</span>)</span><br><span class="line">        Dialog.setMinimumSize(QtCore.QSize(<span class="number">1050</span>, <span class="number">750</span>))</span><br><span class="line">        Dialog.setMaximumSize(QtCore.QSize(<span class="number">1050</span>, <span class="number">750</span>))</span><br><span class="line">        icon = QtGui.QIcon()</span><br><span class="line">        icon.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/window_icon.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        Dialog.setWindowIcon(icon)</span><br><span class="line">        Dialog.setStyleSheet(<span class="string">"font: 10pt \"微软雅黑\";"</span>)</span><br><span class="line">        Dialog.setSizeGripEnabled(<span class="literal">False</span>)</span><br><span class="line">        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(Dialog)</span><br><span class="line">        self.horizontalLayout_4.setObjectName(<span class="string">"horizontalLayout_4"</span>)</span><br><span class="line">        self.tabWidget = QtWidgets.QTabWidget(Dialog)</span><br><span class="line">        self.tabWidget.setMinimumSize(QtCore.QSize(<span class="number">550</span>, <span class="number">400</span>))</span><br><span class="line">        self.tabWidget.setMaximumSize(QtCore.QSize(<span class="number">550</span>, <span class="number">400</span>))</span><br><span class="line">        self.tabWidget.setStyleSheet(<span class="string">"QPushButton&#123;border-radius: 10px;border: 2px groove gray;border-style: outset;&#125;\n"</span></span><br><span class="line"><span class="string">"QPushButton:hover&#123;color: #66A3FF;background:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,stop: 0 #fafafa, stop: 0.4 #f4f4f4,stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);&#125;\n"</span></span><br><span class="line"><span class="string">"QPushButton:pressed&#123;color: #E680BD;&#125;\n"</span></span><br><span class="line"><span class="string">"QLineEdit&#123;border:0px;margin:10px;border-bottom: 2px solid #B3B3B3&#125;\n"</span></span><br><span class="line"><span class="string">"QLineEdit:hover&#123;border-bottom: 3px solid #66A3FF;&#125;\n"</span></span><br><span class="line"><span class="string">"QLineEdit:focus&#123;border-bottom: 3px solid #E680BD;&#125;\n"</span></span><br><span class="line"><span class="string">"QTabBar::tab:hover&#123;color: #66A3FF;background:qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,stop: 0 #fafafa, stop: 0.4 #f4f4f4,stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);&#125;\n"</span></span><br><span class="line"><span class="string">"QTabBar::tab:selected&#123;color: #E680BD;&#125;"</span>)</span><br><span class="line">        self.tabWidget.setDocumentMode(<span class="literal">False</span>)</span><br><span class="line">        self.tabWidget.setTabsClosable(<span class="literal">False</span>)</span><br><span class="line">        self.tabWidget.setObjectName(<span class="string">"tabWidget"</span>)</span><br><span class="line">        self.tab = QtWidgets.QWidget()</span><br><span class="line">        self.tab.setObjectName(<span class="string">"tab"</span>)</span><br><span class="line">        self.register_exit_button = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.register_exit_button.setGeometry(QtCore.QRect(<span class="number">150</span>, <span class="number">220</span>, <span class="number">93</span>, <span class="number">28</span>))</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.register_exit_button.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.register_exit_button.setSizePolicy(sizePolicy)</span><br><span class="line">        self.register_exit_button.setObjectName(<span class="string">"register_exit_button"</span>)</span><br><span class="line">        self.register_confirm_button = QtWidgets.QPushButton(self.tab)</span><br><span class="line">        self.register_confirm_button.setGeometry(QtCore.QRect(<span class="number">310</span>, <span class="number">220</span>, <span class="number">93</span>, <span class="number">28</span>))</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.register_confirm_button.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.register_confirm_button.setSizePolicy(sizePolicy)</span><br><span class="line">        self.register_confirm_button.setObjectName(<span class="string">"register_confirm_button"</span>)</span><br><span class="line">        self.layoutWidget = QtWidgets.QWidget(self.tab)</span><br><span class="line">        self.layoutWidget.setGeometry(QtCore.QRect(<span class="number">151</span>, <span class="number">126</span>, <span class="number">235</span>, <span class="number">49</span>))</span><br><span class="line">        self.layoutWidget.setObjectName(<span class="string">"layoutWidget"</span>)</span><br><span class="line">        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget)</span><br><span class="line">        self.horizontalLayout_2.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.horizontalLayout_2.setObjectName(<span class="string">"horizontalLayout_2"</span>)</span><br><span class="line">        self.label_2 = QtWidgets.QLabel(self.layoutWidget)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.label_2.setSizePolicy(sizePolicy)</span><br><span class="line">        self.label_2.setObjectName(<span class="string">"label_2"</span>)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.label_2)</span><br><span class="line">        self.password_register_input = QtWidgets.QLineEdit(self.layoutWidget)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.password_register_input.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.password_register_input.setSizePolicy(sizePolicy)</span><br><span class="line">        self.password_register_input.setObjectName(<span class="string">"password_register_input"</span>)</span><br><span class="line">        self.horizontalLayout_2.addWidget(self.password_register_input)</span><br><span class="line">        self.layoutWidget1 = QtWidgets.QWidget(self.tab)</span><br><span class="line">        self.layoutWidget1.setGeometry(QtCore.QRect(<span class="number">151</span>, <span class="number">81</span>, <span class="number">235</span>, <span class="number">49</span>))</span><br><span class="line">        self.layoutWidget1.setObjectName(<span class="string">"layoutWidget1"</span>)</span><br><span class="line">        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget1)</span><br><span class="line">        self.horizontalLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.horizontalLayout.setObjectName(<span class="string">"horizontalLayout"</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.layoutWidget1)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.label.setSizePolicy(sizePolicy)</span><br><span class="line">        self.label.setObjectName(<span class="string">"label"</span>)</span><br><span class="line">        self.horizontalLayout.addWidget(self.label)</span><br><span class="line">        self.account_register_input = QtWidgets.QLineEdit(self.layoutWidget1)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.account_register_input.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.account_register_input.setSizePolicy(sizePolicy)</span><br><span class="line">        self.account_register_input.setObjectName(<span class="string">"account_register_input"</span>)</span><br><span class="line">        self.horizontalLayout.addWidget(self.account_register_input)</span><br><span class="line">        self.layoutWidget2 = QtWidgets.QWidget(self.tab)</span><br><span class="line">        self.layoutWidget2.setGeometry(QtCore.QRect(<span class="number">152</span>, <span class="number">173</span>, <span class="number">269</span>, <span class="number">49</span>))</span><br><span class="line">        self.layoutWidget2.setObjectName(<span class="string">"layoutWidget2"</span>)</span><br><span class="line">        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget2)</span><br><span class="line">        self.horizontalLayout_3.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.horizontalLayout_3.setObjectName(<span class="string">"horizontalLayout_3"</span>)</span><br><span class="line">        self.label_3 = QtWidgets.QLabel(self.layoutWidget2)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.label_3.setSizePolicy(sizePolicy)</span><br><span class="line">        self.label_3.setObjectName(<span class="string">"label_3"</span>)</span><br><span class="line">        self.horizontalLayout_3.addWidget(self.label_3)</span><br><span class="line">        self.re_password_register_input = QtWidgets.QLineEdit(self.layoutWidget2)</span><br><span class="line">        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)</span><br><span class="line">        sizePolicy.setHorizontalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setVerticalStretch(<span class="number">0</span>)</span><br><span class="line">        sizePolicy.setHeightForWidth(self.re_password_register_input.sizePolicy().hasHeightForWidth())</span><br><span class="line">        self.re_password_register_input.setSizePolicy(sizePolicy)</span><br><span class="line">        self.re_password_register_input.setObjectName(<span class="string">"re_password_register_input"</span>)</span><br><span class="line">        self.horizontalLayout_3.addWidget(self.re_password_register_input)</span><br><span class="line">        icon1 = QtGui.QIcon()</span><br><span class="line">        icon1.addPixmap(QtGui.QPixmap(<span class="string">":/1/icons/注册.png"</span>), QtGui.QIcon.Normal, QtGui.QIcon.Off)</span><br><span class="line">        self.tabWidget.addTab(self.tab, icon1, <span class="string">""</span>)</span><br><span class="line">        self.horizontalLayout_4.addWidget(self.tabWidget)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Dialog)</span><br><span class="line">        self.tabWidget.setCurrentIndex(<span class="number">0</span>)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Dialog)</span><br><span class="line">        Dialog.setTabOrder(self.account_register_input, self.password_register_input)</span><br><span class="line">        Dialog.setTabOrder(self.password_register_input, self.register_confirm_button)</span><br><span class="line">        Dialog.setTabOrder(self.register_confirm_button, self.register_exit_button)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, Dialog)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Dialog.setWindowTitle(_translate(<span class="string">"Dialog"</span>, <span class="string">"注册"</span>))</span><br><span class="line">        self.register_exit_button.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"退出"</span>))</span><br><span class="line">        self.register_confirm_button.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"确认注册"</span>))</span><br><span class="line">        self.label_2.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"密码:"</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"账号:"</span>))</span><br><span class="line">        self.label_3.setText(_translate(<span class="string">"Dialog"</span>, <span class="string">"重复密码:"</span>))</span><br><span class="line">        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate(<span class="string">"Dialog"</span>, <span class="string">"学生注册"</span>))</span><br><span class="line"><span class="keyword">import</span> icons_rc</span><br></pre></td></tr></table></figure>

<hr>
<p>runregister.py</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> register <span class="keyword">import</span> Ui_Dialog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span><span class="params">(QDialog, Ui_Dialog)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Register, self).__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># clicked信号绑定自定义槽jump_to_login</span></span><br><span class="line">        self.register_confirm_button.clicked.connect(self.jump_to_login)</span><br><span class="line">        <span class="comment"># clicked信号链接自定义槽from_register_to_login</span></span><br><span class="line">        self.register_exit_button.clicked.connect(self.from_register_to_login)</span><br><span class="line">    <span class="comment"># 给注册窗口设置背景</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        pixmap = QPixmap(<span class="string">"./images/background.png"</span>)</span><br><span class="line">        painter.drawPixmap(self.rect(), pixmap)</span><br><span class="line">    <span class="comment"># 注册确认,跳转到登陆界面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump_to_login</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> runlogin <span class="keyword">import</span> Login</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取注册的账号，密码以及重复密码</span></span><br><span class="line">        account = self.account_register_input.text()</span><br><span class="line">        password = self.password_register_input.text()</span><br><span class="line">        re_password = self.re_password_register_input.text()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果账号为空，则重新输入</span></span><br><span class="line">        <span class="keyword">if</span> account == <span class="string">""</span> <span class="keyword">or</span> password == <span class="string">""</span>:</span><br><span class="line">            QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"账号密码不能为空，请重新输入"</span>)</span><br><span class="line">            self.account_register_input.clear()</span><br><span class="line">            self.password_register_input.clear()</span><br><span class="line">            self.re_password_register_input.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"******"</span>, <span class="string">"management_system"</span>)</span><br><span class="line">            cursor = db.cursor()</span><br><span class="line">            sql = <span class="string">"SELECT *FROM STUDENT_ACCOUNT "</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            <span class="comment"># flag=False代表用户名不重复，flag=True代表用户名重复</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> cursor.fetchall():</span><br><span class="line">                <span class="keyword">if</span> account == row[<span class="number">0</span>]:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 如果用户名重复</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"账户名已存在，请重新注册"</span>)</span><br><span class="line">                self.account_register_input.clear()</span><br><span class="line">                self.password_register_input.clear()</span><br><span class="line">                self.re_password_register_input.clear()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> password != re_password:</span><br><span class="line">                    QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"两次输入密码不一致，请重新输入"</span>)</span><br><span class="line">                    self.account_register_input.clear()</span><br><span class="line">                    self.password_register_input.clear()</span><br><span class="line">                    self.re_password_register_input.clear()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 向数据库中插入新的账户和密码</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        sql = <span class="string">"insert into student_account(account, password) values(%s, %s)"</span></span><br><span class="line">                        data = (account, password)</span><br><span class="line">                        cursor.execute(sql, data)</span><br><span class="line">                        db.commit()  <span class="comment"># 提交</span></span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        print(<span class="number">77</span>)</span><br><span class="line">                    cursor.close()</span><br><span class="line">                    db.close()</span><br><span class="line"></span><br><span class="line">                    QMessageBox.information(self, <span class="string">"提示"</span>, <span class="string">"注册成功，请重新登录"</span>)</span><br><span class="line">                    self.close()</span><br><span class="line">                    self.main_student = Login()</span><br><span class="line">                    self.main_student.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学生注册界面点击退出按钮跳转回到登录界面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_register_to_login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> runlogin <span class="keyword">import</span> Login</span><br><span class="line"></span><br><span class="line">        self.close()</span><br><span class="line">        self.login = Login()</span><br><span class="line">        self.login.show()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>ProgrammingWeek</tag>
      </tags>
  </entry>
</search>
